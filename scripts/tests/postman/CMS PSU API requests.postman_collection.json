{
	"info": {
		"_postman_id": "bf7a2dfa-35de-4864-9f3b-cfe555dd3520",
		"name": "CMS PSU API requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Aspsp Consent Data",
			"item": [
				{
					"name": "Successful cases",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "645fa8b0-50b6-4439-a80d-5c7c20603f87",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set ASPSP properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f72645b1-f542-4c54-9933-94bf7c5baff0",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Initiate payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32999f7d-d9ab-4b2d-b06c-0709a696e2e1",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Transaction status is RCVD\", () => {",
											"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
											"});",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"pm.test(\"scaRedirect link is present\", () => {",
											"    pm.expect(scaRedirectLink).not.eq(undefined);",
											"});",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    const redirectLinkParts = scaRedirectLink.split('/');",
											"    redirectLinkParts.pop();",
											"    const redirectId = redirectLinkParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "deb1cd5b-311b-4ae0-901f-c6df1871d49d",
										"exec": [
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{ip_address}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Tpp-Redirect-Uri",
										"value": "some.redirect.uri",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"endToEndIdentification\": \"RI-1234567890\",\n\"debtorAccount\": {\n  \"currency\": \"EUR\",\n  \"iban\": \"{{iban_none}}\"\n },\n\"instructedAmount\": {\n  \"amount\": 1000,\n  \"currency\": \"EUR\"\n },\n\"creditorAccount\": {\n  \"currency\": \"EUR\",\n  \"iban\": \"{{iban_none}}\"\n },\n\"creditorAgent\": \"AAAADEBBXXX\",\n\"creditorName\": \"Telekom\",\n \"creditorAddress\": {\n  \"buildingNumber\": \"123-34\",\n  \"townName\": \"Nürnberg\",\n  \"country\": \"DE\",\n  \"postCode\": 90431,\n  \"streetName\": \"Herrnstraße\"\n },\n \"remittanceInformationUnstructured\": \"Ref. Number TELEKOM-1222\"\n }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"{{payment_service}}",
										"{{payment_product}}"
									]
								},
								"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
							},
							"response": []
						},
						{
							"name": "4. Get payment response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1e9ad07-91d1-4273-a8d6-ad8845d181e8",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const paymentId = jsonData.payment.paymentId;",
											"pm.globals.set(\"payment_id\", paymentId);",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ddde3cc-eb6c-4f61-8ef0-adaf0a2d2cbc",
										"exec": [
											"pm.globals.unset(\"payment_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Create aspsp consent data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9035652b-c56b-4841-af86-7e79e6091420",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "293d94fa-6c0a-4eae-878c-958e57af3f9d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{payment_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{payment_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{payment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Get aspsp consent data identified by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8a6d631-8e9c-47dd-892d-01b5bed562ba",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('consentId');",
											"       pm.expect(jsonData).to.have.property('aspspConsentDataBase64');",
											"});",
											"",
											"const aspspConsentDataBase64 = jsonData.aspspConsentDataBase64;",
											"pm.test(\"Aspsp Consent Data Base64\", () => {",
											"    pm.expect(aspspConsentDataBase64).to.eql(pm.globals.get(\"encodedLedgersBearerToken\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{payment_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{payment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Update aspsp consent data identified by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e09fdf16-01d1-44f9-b95f-cba53e3e78a5",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7d1c619e-6125-44ba-8df2-d305ee7ff942",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{payment_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{payment_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{payment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Delete aspsp consent data identified by given consent id / payment id.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d716745-dda2-4bf3-90da-93defbe16409",
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{payment_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{payment_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Errorful cases",
					"item": [
						{
							"name": "1. Update aspsp consent data identified by id NOT_FOUND",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1cc3ebf6-56dc-4bfa-8d5f-b19cb5c5f44c",
										"exec": [
											"var ledgersBearerToken = pm.globals.get(\"ledgersBearerToken\");",
											"var utf8string = CryptoJS.enc.Utf8.parse(ledgersBearerToken);",
											"",
											"pm.globals.set(\"encodedLedgersBearerToken\", CryptoJS.enc.Base64.stringify(utf8string));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0052beed-6e61-4bc8-8c78-8bd8a2bfda45",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"aspspConsentDataBase64\": \"{{encodedLedgersBearerToken}}\",\n  \"consentId\": \"{{payment_id}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/CxymMkwtykFtTeQuH1jrcoOyzcqCcwNCt5193Gfn33mqqcAy_xw2KPwMd5y6Xxe1EwE0BTNRHeyM0FI90wh0hA==_=_bS6p6XvTWI",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"CxymMkwtykFtTeQuH1jrcoOyzcqCcwNCt5193Gfn33mqqcAy_xw2KPwMd5y6Xxe1EwE0BTNRHeyM0FI90wh0hA==_=_bS6p6XvTWI"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Get aspsp consent data identified by id NOT_FOUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9589431c-1f8a-4ab2-917a-f9e8dddda1a1",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{payment_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{payment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get aspsp consent data identified by id NOT_FOUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca987391-d8f1-4ccc-b671-fda38f10829f",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/CxymMkwtykFtTeQuH1jrcoOyzcqCcwNCt5193Gfn33mqqcAy_xw2KPwMd5y6Xxe1EwE0BTNRHeyM0FI90wh0hA==_=_bS6p6XvTWI",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"CxymMkwtykFtTeQuH1jrcoOyzcqCcwNCt5193Gfn33mqqcAy_xw2KPwMd5y6Xxe1EwE0BTNRHeyM0FI90wh0hA==_=_bS6p6XvTWI"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Delete aspsp consent data identified by id NOT_FOUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6847bea6-ee53-469f-b84f-edd783ce9d39",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/{{payment_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"{{payment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Delete aspsp consent data identified by wrong id NOT_FOUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99315458-6b86-4965-b9eb-157182b4882b",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/aspsp-consent-data/consents/CxymMkwtykFtTeQuH1jrcoOyzcqCcwNCt5193Gfn33mqqcAy_xw2KPwMd5y6Xxe1EwE0BTNRHeyM0FI90wh0hA==_=_bS6p6XvTWI",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"aspsp-consent-data",
										"consents",
										"CxymMkwtykFtTeQuH1jrcoOyzcqCcwNCt5193Gfn33mqqcAy_xw2KPwMd5y6Xxe1EwE0BTNRHeyM0FI90wh0hA==_=_bS6p6XvTWI"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PSU AIS Consents",
			"item": [
				{
					"name": "Errorful cases",
					"item": [
						{
							"name": "1. Get consent response object by redirect id NOT_FOUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "995de965-2839-4f0b-981b-43419ef25247",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "63ff44bd-81ac-4366-82bd-12949ada54d8",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{internal_consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Update PSU Data in consent BAD_REQUEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb669c97-17a6-47ba-b220-6d1b253d2411",
										"exec": [
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"psuId\": \"{{psu_id_none}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{internal_authorisation_id}}/psu-data",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{internal_authorisation_id}}",
										"psu-data"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Update a status of AIS consent authorisation BAD_REQUEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "481ea547-ebad-475a-8b78-d7b113ca05ac",
										"exec": [
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"authenticationMethodId\": \"SMS\",\n\t\"authenticationData\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{internal_authorisation_id}}/status/FINALISED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"authorisation",
										"{{internal_authorisation_id}}",
										"status",
										"FINALISED"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Confirm AIS consent FALSE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eeef77b6-9107-4294-9e74-3db526aa7d5a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status changed\", () => {",
											"        pm.expect(jsonData).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"confirm-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Change ConsentStatus to \"PARTIALLY_AUTHORISED\" FALSE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20c883ed-954f-49c5-b1fa-b5e1feb311e8",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status changed\", () => {",
											"        pm.expect(jsonData).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{consent_id}}/authorise-partially-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{consent_id}}",
										"authorise-partially-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Get AIS consent object from CMS NOT_FOUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4e1fdb1-cb5e-4768-bdf5-7061af34454d",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Save access (availableAccounts) NOT_FOUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c300977-2984-45f7-bbc6-34e04815d445",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"accountAccess\": {\n    \t\"availableAccounts\": \"allAccounts\"\n    },\n    \"frequencyPerDay\": 100,\n    \"validUntil\": \"2020-12-31\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Revoke Ais Consent FALSE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6806a4ff-e52d-49b5-8db3-22efe6033aff",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status changed\", () => {",
											"    pm.expect(jsonData).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{consent_id}}/revoke-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{consent_id}}",
										"revoke-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Get Authorisation By Authorisation Id BAD_REQUEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "609beddd-29c9-427e-94f4-fce205e754c0",
										"exec": [
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/authorisation/{{internal_authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"authorisation",
										"{{internal_authorisation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Reject Ais Consent FALSE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78af210f-9a39-40cf-9461-0de01e3a0d3c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status changed\", () => {",
											"    pm.expect(jsonData).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{consent_id}}/reject-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{consent_id}}",
										"reject-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Get list of PSU data Authorisations NOT_FOUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "086a7ea8-4072-4ad8-8933-7ae3498ae664",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{consent_id}}/authorisation/psus",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{consent_id}}",
										"authorisation",
										"psus"
									]
								},
								"description": "Returns EMPTY list of info objects about psu data and authorisation scaStatuses"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Successful cases",
					"item": [
						{
							"name": "Revoke AIS Consent",
							"item": [
								{
									"name": "1. Set redirect SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd5c28f8-14b6-48e4-8454-c3423aed0909",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d6af2b0-e679-4544-982e-7a1c901d9fc0",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create AIS consent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dddd9659-9bbb-4a35-99f7-63cadffbf757",
												"exec": [
													"pm.globals.unset(\"consent_id\");",
													"pm.globals.unset(\"redirect_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "624bed36-276d-4b66-9278-dd1087190006",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"",
													"const scaRedirectLink = jsonData._links.scaRedirect.href;",
													"",
													"if (scaRedirectLink !== undefined) {",
													"    var a = scaRedirectLink.split('/');",
													"    a.pop();",
													"    const authorisationId = a.pop();",
													"    pm.globals.set(\"authorisation_id\", authorisationId);",
													"}",
													"",
													"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
													"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
													"pm.globals.set(\"redirect_id\", redirectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "date",
												"value": "Sun, 11 Aug 2019 15:02:37 GMT"
											},
											{
												"key": "tpp-qwac-certificate",
												"value": "qwac certificate",
												"disabled": true
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"type": "text",
												"value": "true"
											},
											{
												"key": "TPP-Redirect-URI",
												"type": "text",
												"value": "TPP-Redirect-URI"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"type": "text",
												"value": "TPP-Nok-Redirect-URI"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"2021-12-31\"\n    }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										},
										"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
									},
									"response": []
								},
								{
									"name": "4. Get consent response object by redirect id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04796376-ecc4-49e6-ba97-9ab35e11fbab",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Authorisation id is present\", () => {",
													"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
													"});",
													"",
													"pm.test(\"Redirect URLs are present\", () => {",
													"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
													"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
													"});",
													"",
													"const authorisationId = jsonData.authorisationId;",
													"pm.test(\"Authorisation id is correct\", () => {",
													"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
													"});",
													"",
													"pm.test(\"Consent id is present\", () => {",
													"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
													"});",
													"",
													"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0722fe15-9015-4ad6-90ca-2920b2b0cb5f",
												"exec": [
													"pm.globals.unset(\"internal_consent_id\");",
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"redirect",
												"{{redirect_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Update PSU Data in consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec773d3e-4af7-4ffb-b13a-4109b355a742",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"psuId\": \"{{psu_id_none}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/psu-data",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"authorisation",
												"{{authorisation_id}}",
												"psu-data"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Update a status of AIS consent authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fe79f9a-2561-45ab-a620-8d6048ccd754",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"authenticationMethodId\": \"SMS\",\n\t\"authenticationData\": \"123456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"authorisation",
												"{{authorisation_id}}",
												"status",
												"FINALISED"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Confirm AIS consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8077cc2-599e-4578-9af0-69fd26767e48",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status changed\", () => {",
													"        pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"confirm-consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Get AIS consent object from CMS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49d757c7-e6f9-414e-9614-b6a0750e93f4",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status is VALID\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Change ConsentStatus to \"PARTIALLY_AUTHORISED\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a5090cd-a799-4183-aec9-10ef63c023e7",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status changed\", () => {",
													"        pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_none}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorise-partially-consent",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"authorise-partially-consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Get AIS consent object from CMS PARTIALLY_AUTHORISED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f3f757d-284c-440b-8ab9-d13a99c1b350",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status is PARTIALLY_AUTHORISED\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql(\"PARTIALLY_AUTHORISED\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Get list of PSU data Authorisations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "026366e4-f812-4bc8-97be-bcaf1812ab79",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"PSU ID\", () => {",
													"    _.each(jsonData, (arrItem) => {",
													"        pm.expect(arrItem.psuId).to.eql(pm.variables.get(\"psu_id_none\"));",
													"    })",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/psus",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"authorisation",
												"psus"
											]
										},
										"description": "Returns list of info objects about psu data and authorisation scaStatuses"
									},
									"response": []
								},
								{
									"name": "12. Save access (availableAccounts)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd767b9a-5806-46f5-836f-d251c5616b08",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accountAccess\": {\n    \t\"availableAccounts\": \"allAccounts\"\n    },\n    \"frequencyPerDay\": 100,\n    \"validUntil\": \"2021-12-31\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"save-access"
											]
										}
									},
									"response": []
								},
								{
									"name": "13. Revoke Ais Consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a9e7ed1-6e85-41c5-998d-40b3949a43fe",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status changed\", () => {",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/revoke-consent",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"revoke-consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "14. Get list of AIS Consent objects by PSU ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfb9348b-1aba-4ec4-a9ef-9527b13ffc89",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Psu id\", () => {",
													"    _.each(jsonData, (arrItem) => {",
													"        pm.expect(arrItem.psuIdDataList[0].psuId).to.eql(pm.variables.get(\"psu_id_none\"));",
													"    })",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Get EMPTY list of AIS Consent objects by PSU ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca69f74d-2c00-4350-be25-7a09e911be66",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"pm.test(\"Empty array\", () => {",
													"    pm.expect(jsonData.length).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "16. Get Authorisation By Authorisation Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bba6432-a67a-464f-b6e9-c3a39e51847e",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"PSU ID\", () => {",
													"    pm.expect(jsonData.psuId).to.eql(pm.variables.get(\"psu_id_none\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/authorisation/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"authorisation",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc03bf8c-aa16-4b1e-88ed-312f59675ffd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "293a8e29-51ff-4a7d-b48b-2c4c00feaf18",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Reject AIS Consent",
							"item": [
								{
									"name": "1. Set redirect SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c347b0b2-5b51-432b-8b58-8769ea39192b",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2325cef6-7814-470c-8025-250581d58082",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create AIS consent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "65aade57-80b0-44eb-85a1-b049d9e0f095",
												"exec": [
													"pm.globals.unset(\"consent_id\");",
													"pm.globals.unset(\"redirect_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d5fd01d9-bfab-4657-a1bc-fad6280049b8",
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"",
													"const scaRedirectLink = jsonData._links.scaRedirect.href;",
													"",
													"if (scaRedirectLink !== undefined) {",
													"    var a = scaRedirectLink.split('/');",
													"    a.pop();",
													"    const authorisationId = a.pop();",
													"    pm.globals.set(\"authorisation_id\", authorisationId);",
													"}",
													"",
													"const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
													"const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
													"pm.globals.set(\"redirect_id\", redirectId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "date",
												"value": "Sun, 11 Aug 2019 15:02:37 GMT"
											},
											{
												"key": "tpp-qwac-certificate",
												"value": "qwac certificate",
												"disabled": true
											},
											{
												"key": "x-request-id",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"type": "text",
												"value": "true"
											},
											{
												"key": "TPP-Redirect-URI",
												"type": "text",
												"value": "TPP-Redirect-URI"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"type": "text",
												"value": "TPP-Nok-Redirect-URI"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n      \"access\": {\n        \"accounts\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"balances\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ],\n        \"transactions\": [\n          {\n            \"currency\": \"EUR\",\n\t\t\t\"iban\": \"{{iban_single}}\"\n          }\n        ]\n      },\n      \"combinedServiceIndicator\": false,\n      \"frequencyPerDay\": 400,\n      \"recurringIndicator\": true,\n      \"validUntil\": \"2021-12-31\"\n    }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										},
										"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
									},
									"response": []
								},
								{
									"name": "4. Get consent response object by redirect id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e2d016c-1aa4-49a9-84b3-8559aa424139",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Authorisation id is present\", () => {",
													"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
													"});",
													"",
													"pm.test(\"Redirect URLs are present\", () => {",
													"    pm.expect(jsonData).to.have.property(\"tppOkRedirectUri\");",
													"    pm.expect(jsonData).to.have.property(\"tppNokRedirectUri\");",
													"});",
													"",
													"const authorisationId = jsonData.authorisationId;",
													"pm.test(\"Authorisation id is correct\", () => {",
													"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
													"});",
													"",
													"pm.test(\"Consent id is present\", () => {",
													"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
													"});",
													"",
													"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "75c3ee8a-f916-4b3f-8a67-dff68672ad68",
												"exec": [
													"pm.globals.unset(\"internal_consent_id\");",
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"redirect",
												"{{redirect_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Update PSU Data in consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e3f9f0a-e227-4d3e-803d-759cafcaf953",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"psuId\": \"{{psu_id_none}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/psu-data",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"authorisation",
												"{{authorisation_id}}",
												"psu-data"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Update a status of AIS consent authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae47420e-df49-42e6-9c42-bf89be5ad88d",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"authenticationMethodId\": \"SMS\",\n\t\"authenticationData\": \"123456\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"authorisation",
												"{{authorisation_id}}",
												"status",
												"FINALISED"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Confirm AIS consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "596b3571-fad2-422c-b7be-1cf5571e05d5",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status changed\", () => {",
													"        pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/confirm-consent",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"confirm-consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. Get AIS consent object from CMS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd8f78ab-3bcb-4235-adf2-e3ecdcc1aada",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status is VALID\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Change ConsentStatus to \"PARTIALLY_AUTHORISED\"",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59abbf2f-dde1-40f0-b568-caac01120e8c",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status changed\", () => {",
													"        pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_none}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorise-partially-consent",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"authorise-partially-consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Get AIS consent object from CMS PARTIALLY_AUTHORISED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1a5b631-d7b1-4dc7-a8a4-c0ec282ee7eb",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status is PARTIALLY_AUTHORISED\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql(\"PARTIALLY_AUTHORISED\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. Get list of PSU data Authorisations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67963b14-6c71-47ae-940d-5ff1c82b2965",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"PSU ID\", () => {",
													"    _.each(jsonData, (arrItem) => {",
													"        pm.expect(arrItem.psuId).to.eql(pm.variables.get(\"psu_id_none\"));",
													"    })",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/authorisation/psus",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"authorisation",
												"psus"
											]
										},
										"description": "Returns list of info objects about psu data and authorisation scaStatuses"
									},
									"response": []
								},
								{
									"name": "12. Save access (availableAccounts)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e642c42-3122-4e82-86f7-929405abab64",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accountAccess\": {\n    \t\"availableAccounts\": \"allAccounts\"\n    },\n    \"frequencyPerDay\": 100,\n    \"validUntil\": \"2021-12-31\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"save-access"
											]
										}
									},
									"response": []
								},
								{
									"name": "13 .Reject Ais Consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f37237b-82f9-4ee9-a445-46dda9eaa997",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent status changed\", () => {",
													"    pm.expect(jsonData).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/reject-consent",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"{{internal_consent_id}}",
												"reject-consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "14. Get list of AIS Consent objects by PSU ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c1ba6ef-9da1-48c3-99a8-4ccd405d615f",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Psu id\", () => {",
													"    _.each(jsonData, (arrItem) => {",
													"        pm.expect(arrItem.psuIdDataList[0].psuId).to.eql(pm.variables.get(\"psu_id_none\"));",
													"    })",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Get Authorisation By Authorisation Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31f7aa37-7b9b-4698-99eb-25b7cb46e60f",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"PSU ID\", () => {",
													"    pm.expect(jsonData.psuId).to.eql(pm.variables.get(\"psu_id_none\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/authorisation/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_cms}}"
											],
											"path": [
												"psu-api",
												"v1",
												"ais",
												"consent",
												"authorisation",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9a92758-d7c3-411b-808c-7881d4fb2863",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "021dd8c7-e1b4-4a0a-a6ca-42eaf76ee402",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PSU PIS Payment",
			"item": [
				{
					"name": "Errorful cases",
					"item": [
						{
							"name": "1. Get payment response object by redirect id NOT_FOUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2f5730b-8714-4e3f-a827-a9ff9bd60051",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ca941fa-4c3d-4266-b419-23aa808fe899",
										"exec": [
											"pm.globals.set(\"wrong_id\", \"kljghdgflkhjf5w67437698gyuvg97fcr6ditof6r\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/redirect/{{wrong_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"redirect",
										"{{wrong_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Get payment by redirect id for cancellation NOT_FOUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "966b5cb8-d195-4cd9-a5c1-55af14ea17fb",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "614d19ea-67ca-4eb1-b7b1-98b22577b55a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"type": "text",
										"value": "",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/cancellation/redirect/{{wrong_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"cancellation",
										"redirect",
										"{{wrong_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get payment by payment id BAD_REQUEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "898827aa-f226-46ae-803f-1da9558c339f",
										"exec": [
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "psu-id",
										"type": "text",
										"value": "marion.mueller",
										"disabled": true
									},
									{
										"key": "psu-id-type",
										"type": "text",
										"value": "psu id type",
										"disabled": true
									},
									{
										"key": "psu-corporate-id",
										"type": "text",
										"value": "psu corporate id",
										"disabled": true
									},
									{
										"key": "psu-corporate-id-type",
										"type": "text",
										"value": "psu corporate id type",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{payment_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"{{payment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get authorisation by authorisation id  BAD_REQUEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "630ae453-5f4f-4c90-91a2-e84b6fdea7cb",
										"exec": [
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/authorisation/{{payment_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"authorisation",
										"{{payment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Get payment by payment id for cancellation BAD_REQUEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2acbef60-6b70-4ef2-9c16-099e27bf2d84",
										"exec": [
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "psu-id",
										"type": "text",
										"value": "marion.mueller",
										"disabled": true
									},
									{
										"key": "psu-id-type",
										"type": "text",
										"value": "psu id type",
										"disabled": true
									},
									{
										"key": "psu-corporate-id",
										"type": "text",
										"value": "psu corporate id",
										"disabled": true
									},
									{
										"key": "psu-corporate-id-type",
										"type": "text",
										"value": "psu corporate id type",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/cancellation/{{payment_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"cancellation",
										"{{payment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Update authorisation status to FINALISED BAD_REQUEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d4c6b00-ed38-4bc1-b3f5-370b7d77eeba",
										"exec": [
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "399e3fc6-d0c3-4eb2-9e25-406785f42a6b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-id",
										"value": "{{psu_id_none}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{payment_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"{{payment_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"FINALISED"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Update payment status to PATC BAD_REQUEST",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e0e48b3a-877a-46a7-8238-18be330043f0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca6f60cd-8828-449b-a3ab-490b9baaf7c8",
										"exec": [
											"pm.test('Status code is 400', () => {",
											"   pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{wrong_id}}/status/PATC",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"{{wrong_id}}",
										"status",
										"PATC"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "8. Update PSU Data in payment BAD_REQUEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "087c8b55-f5df-4ccf-937e-6e8a8f74fef4",
										"exec": [
											"pm.test(\"Status code is 400\", () => {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"psuId\": \"{{psu_id_none}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/authorisation/{{payment_id}}/psu-data",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"authorisation",
										"{{payment_id}}",
										"psu-data"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Successful cases",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8476dd15-f351-4393-be20-eae4de47f7e1",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set ASPSP properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98d0283e-4fe5-40cc-9b25-cec8d847df07",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Initiate payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "300e91ac-8e9c-4258-b46b-4ef768fa5cbe",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Transaction status is RCVD\", () => {",
											"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
											"});",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"pm.test(\"scaRedirect link is present\", () => {",
											"    pm.expect(scaRedirectLink).not.eq(undefined);",
											"});",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    const redirectLinkParts = scaRedirectLink.split('/');",
											"    redirectLinkParts.pop();",
											"    const redirectId = redirectLinkParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9112ef06-f39b-47d8-9324-79ab646e8bfa",
										"exec": [
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{ip_address}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Tpp-Redirect-Uri",
										"value": "some.redirect.uri",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"endToEndIdentification\": \"RI-1234567890\",\n\"debtorAccount\": {\n  \"currency\": \"EUR\",\n  \"iban\": \"{{iban_none}}\"\n },\n\"instructedAmount\": {\n  \"amount\": 1000,\n  \"currency\": \"EUR\"\n },\n\"creditorAccount\": {\n  \"currency\": \"EUR\",\n  \"iban\": \"{{iban_none}}\"\n },\n\"creditorAgent\": \"AAAADEBBXXX\",\n\"creditorName\": \"Telekom\",\n \"creditorAddress\": {\n  \"buildingNumber\": \"123-34\",\n  \"townName\": \"Nürnberg\",\n  \"country\": \"DE\",\n  \"postCode\": 90431,\n  \"streetName\": \"Herrnstraße\"\n },\n \"remittanceInformationUnstructured\": \"Ref. Number TELEKOM-1222\"\n }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"{{payment_service}}",
										"{{payment_product}}"
									]
								},
								"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
							},
							"response": []
						},
						{
							"name": "4. Get payment response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4cab309-cc5e-4cc6-83ab-65729f56010e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const paymentId = jsonData.payment.paymentId;",
											"pm.globals.set(\"payment_id\", paymentId);",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "069dbed5-3a76-4d5e-bbbd-3ac5713853be",
										"exec": [
											"pm.globals.unset(\"payment_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Get payment by payment id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1fb48f3-2ad5-4861-91db-9cd10b9db7a2",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Payment type\", () => {",
											"        pm.expect(jsonData.paymentType).to.eql(\"payments\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "psu-id",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "psu-id-type",
										"value": "psu id type",
										"type": "text",
										"disabled": true
									},
									{
										"key": "psu-corporate-id",
										"value": "psu corporate id",
										"type": "text",
										"disabled": true
									},
									{
										"key": "psu-corporate-id-type",
										"value": "psu corporate id type",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{payment_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"{{payment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Get authorisation by authorisation id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acbe8108-a6d8-492f-a153-5325da5055bd",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id\", () => {",
											"        pm.expect(jsonData.authorisationId).to.eql(pm.globals.get(\"authorisation_id\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/authorisation/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"authorisation",
										"{{authorisation_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Get payment by payment id for cancellation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62e8d26b-1893-4b04-9cc9-5a6bbcd6d014",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Payment type\", () => {",
											"        pm.expect(jsonData.paymentType).to.eql(\"payments\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "psu-id",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "psu-id-type",
										"type": "text",
										"value": "psu id type",
										"disabled": true
									},
									{
										"key": "psu-corporate-id",
										"type": "text",
										"value": "psu corporate id",
										"disabled": true
									},
									{
										"key": "psu-corporate-id-type",
										"type": "text",
										"value": "psu corporate id type",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/cancellation/{{payment_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"cancellation",
										"{{payment_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Get list of info objects about PSU data and authorisation statuses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b6d5b5f-fdba-4426-bdf3-f97dd98c172e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"PSU ID\", () => {",
											"    _.each(jsonData, (arrItem) => {",
											"        pm.expect(arrItem.psuId).to.eql(pm.variables.get(\"psu_id_none\"));",
											"    })",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{payment_id}}/authorisation/psus",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"{{payment_id}}",
										"authorisation",
										"psus"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Get EMPTY list of info objects about PSU data and authorisation statuses Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "890e1a47-9026-4264-a987-7d266e6f73dc",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/123/authorisation/psus",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"123",
										"authorisation",
										"psus"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Update authorisation status to FINALISED",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "997314c0-ee39-4f23-9123-a8000ef17016",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f004e5a-430b-4183-813b-2e054b58a9d3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-id",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{payment_id}}/authorisation/{{authorisation_id}}/status/FINALISED",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"{{payment_id}}",
										"authorisation",
										"{{authorisation_id}}",
										"status",
										"FINALISED"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Update payment status to PATC",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "38746f5a-54ee-41cd-b429-a27df643036b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0fd93b03-053f-4154-b9ee-999cc8d9f8b4",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/{{payment_id}}/status/PATC",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"{{payment_id}}",
										"status",
										"PATC"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "13. Update PSU Data in payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea8a7045-2be4-489c-9032-06f54dd5d045",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"psuId\": \"{{psu_id_none}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/authorisation/{{authorisation_id}}/psu-data",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"authorisation",
										"{{authorisation_id}}",
										"psu-data"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PSU PIIS, Consents",
			"item": [
				{
					"name": "Errorful cases",
					"item": [
						{
							"name": "1. Get PIIS Consent object by its ID NOT_FOUND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f161b354-a872-45ef-b108-05886f4cd4a8",
										"exec": [
											"pm.test(\"Status code is 404\", () => {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/piis/consents/{{internal_consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"piis",
										"consents",
										"{{internal_consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Revokes PIIS Consent object by its ID. FALSE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9cf923d1-01e1-493b-8733-2700d04f76ca",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status not changed\", () => {",
											"        pm.expect(jsonData).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "psu-id",
										"value": "marion.mueller",
										"type": "text",
										"disabled": true
									},
									{
										"key": "psu-id-type",
										"value": "psu id type",
										"type": "text",
										"disabled": true
									},
									{
										"key": "psu-corporate-id",
										"value": "psu corporate id",
										"type": "text",
										"disabled": true
									},
									{
										"key": "psu-corporate-id-type",
										"value": "psu corporate id type",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/piis/consents/{{consent_id}}/revoke-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"piis",
										"consents",
										"{{consent_id}}",
										"revoke-consent"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Successful cases",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22dea93d-bd32-4421-ad1c-f96467ba370d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set ASPSP properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88575628-dc4b-4f23-ab47-f63725999b5a",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create PIIS consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9940e689-a2d0-4a4d-b0cf-6760052bdfc0",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dc9de7e1-0e3c-402d-a1e5-054ec943ecd1",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const consentId = jsonData.consentId;",
											"pm.globals.set(\"consent_id\", consentId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account\": \n    {\n      \"currency\": \"EUR\",\n      \"iban\": \"LU280019400644750000\",\n      \"aspspAccountId\": \"{{aspsp_account_id}}\"\n    },\n  \"tppAuthorisationNumber\": \"{{tpp_id}}\",\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get PIIS Consent object by its ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f71a720-ee60-4f40-a1cd-68720ffc627e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is VALID\", () => {",
											"        pm.expect(jsonData.consentStatus).to.eql(\"VALID\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/piis/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"piis",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Create another PIIS consent with same PSU and TPP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b54d32de-d904-4dd5-907b-e66b9317453c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bc973240-0482-4636-9b20-6dbba76c7115",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const consentId = jsonData.consentId;",
											"",
											"pm.test(\"Consent ID is present\", () => {",
											"    pm.expect(consentId).not.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account\": {\n        \"currency\": \"EUR\",\n        \"iban\": \"{{iban_none}}\",\n        \"aspspAccountId\": \"{{aspsp_account_id}}\"\n    },\n    \"tppAuthorisationNumber\": \"{{tpp_id}}\",\n    \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "6.  Get a list of PIIS Consent objects by PSU ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "565d884f-49f4-4b2c-b369-eeca1a5c0706",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent psu id\", () => {",
											"    _.each(jsonData, (arrItem) => {",
											"        pm.expect(arrItem.psuData.psuId).to.eql(pm.variables.get(\"psu_id_none\"));",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "some type",
										"type": "text",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID-Type",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Start-Date",
										"value": "2019-01-01",
										"type": "text",
										"disabled": true
									},
									{
										"key": "End-Date",
										"value": "2019-01-16",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Instance-ID",
										"value": "UNDEFINED",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/piis/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"piis",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Revokes PIIS Consent object by its ID. Consent gets status Revoked by PSU.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a24f631c-16d3-48e1-8ecb-5c3e9fce7d1f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status changed\", () => {",
											"        pm.expect(jsonData).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "psu-id",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "psu-id-type",
										"value": "psu id type",
										"type": "text",
										"disabled": true
									},
									{
										"key": "psu-corporate-id",
										"value": "psu corporate id",
										"type": "text",
										"disabled": true
									},
									{
										"key": "psu-corporate-id-type",
										"value": "psu corporate id type",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/piis/consents/{{consent_id}}/revoke-consent",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"piis",
										"consents",
										"{{consent_id}}",
										"revoke-consent"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Get PIIS Consent object by its ID with status \"REVOKED\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20a4e051-a406-4991-813e-bead0e798ec5",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is REVOKED_BY_PSU\", () => {",
											"        pm.expect(jsonData.consentStatus).to.eql(\"REVOKED_BY_PSU\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/piis/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"piis",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}