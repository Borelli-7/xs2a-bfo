{
	"info": {
		"_postman_id": "943c5e11-735c-4773-ba9d-e71aa68f494b",
		"name": "Pain Periodic Payments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0. Set embedded SCA approach Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aa9db0dd-8ce6-4a0a-a0e5-1d5844ce41b1",
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
				},
				"url": {
					"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_aspsp_profile}}"
					],
					"path": [
						"api",
						"v1",
						"aspsp-profile",
						"for-debug",
						"sca-approaches"
					]
				}
			},
			"response": []
		},
		{
			"name": "1. Enable periodic payments support",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "563f375e-e30b-4945-8649-6398611bd5cb",
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ],\n            \"periodic-payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\",\n                \"pain.001-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"sb\": {\n        \"signingBasketSupported\": false,\n        \"signingBasketMaxEntries\": 10,\n        \"notConfirmedSigningBasketExpirationTimeMs\": 86400000\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n            \"NONE\"\n        ],\n        \"authorisationConfirmationRequestMandated\": false,\n        \"authorisationConfirmationCheckByXs2a\": false,\n        \"checkUriComplianceToDomainSupported\": false\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_aspsp_profile}}"
					],
					"path": [
						"api",
						"v1",
						"aspsp-profile",
						"for-debug",
						"aspsp-settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Initiate pain periodic payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c39bc701-3bf1-4b1d-9939-b12e9dfec836",
						"exec": [
							"pm.test(\"Status code is 201\", () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"pm.test(\"Payment ID exists\", () => {",
							"    pm.expect(jsonData).to.have.property('paymentId');",
							"});",
							"",
							"pm.globals.set(\"payment_id\", jsonData.paymentId);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "multipart/form-data; boundary=--AaaBbbCcc"
					},
					{
						"key": "X-Request-ID",
						"type": "text",
						"value": "{{x_request_id}}"
					},
					{
						"key": "PSU-IP-Address",
						"type": "text",
						"value": "{{ip_address}}"
					},
					{
						"key": "PSU-ID",
						"type": "text",
						"value": "{{psu_id_none}}"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "xml_sct",
							"value": "<Document xmlns=\"urn:iso:std:iso:20022:tech:xsd:pain.001.001.03\">\n\n  <CstmrCdtTrfInitn>\n    <GrpHdr>\n<MsgId>MIPI-123456789RI-123456789</MsgId> <CreDtTm>2017-02-14T20:23:34.000Z</CreDtTm> <NbOfTxs>1</NbOfTxs>\n<CtrlSum>123</CtrlSum>\n\n<InitgPty>\n\n<Id><OrgId><Othr><Id>DE10000000012</Id>\n\n<SchmeNm><Prptry>PISP</Prptry></SchmeNm></Othr></OrgId></Id> </InitgPty>\n\n</GrpHdr>\n<PmtInf>\n<PmtInfId>BIPI-123456789RI-123456789</PmtInfId> <PmtMtd>TRF</PmtMtd>\n<NbOfTxs>1</NbOfTxs>\n<CtrlSum>123</CtrlSum>\n\n<PmtTpInf><SvcLvl><Cd>SEPA</Cd></SvcLvl></PmtTpInf> <ReqdExctnDt>2017-02-15</ReqdExctnDt>\n<Dbtr><Nm>PSU Name</Nm></Dbtr> <DbtrAcct><Id><IBAN>DE69760700240340283600</IBAN></Id></DbtrAcct>\n\n<ChrgBr>SLEV</ChrgBr>\n<CdtTrfTxInf>\t\t\t\t\t\n<PmtId><EndToEndId>RI-123456789</EndToEndId></PmtId>\n<Amt><InstdAmt Ccy=\"EUR\">123</InstdAmt></Amt>\n<Cdtr><Nm>Merchant123</Nm></Cdtr>\n<CdtrAcct><Id><IBAN>DE69760700240340283600</IBAN></Id></CdtrAcct>\n<RmtInf><Ustrd>Ref Number Merchant-123456</Ustrd></RmtInf>\n\n      </CdtTrfTxInf>\n    </PmtInf>\t\t\t\t\t\n</CstmrCdtTrfInitn>\n</Document>",
							"type": "text"
						},
						{
							"key": "json_standingorderType",
							"value": "{\n  \"startDate\": \"2023-03-01\",\n  \"endDate\": \"2025-03-01\",\n  \"frequency\": \"Monthly\",\n  \"executionRule\": \"preceding\",\n  \"dayOfExecution\": \"1\"\n}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/periodic-payments/pain.001-sepa-credit-transfers",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"periodic-payments",
						"pain.001-sepa-credit-transfers"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Get payment information",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd0df019-b180-4e98-93ba-d500169a2a5f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, application/xml, multipart/form-data",
						"disabled": true
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					},
					{
						"key": "content-type",
						"value": "multipart/form-data; boundary=--AaaBbbCcc",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/periodic-payments/pain.001-sepa-credit-transfers/{{payment_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"periodic-payments",
						"pain.001-sepa-credit-transfers",
						"{{payment_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Start the authorisation process for a payment initiation",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1992dddb-ab25-4ca8-978e-55f47701dc2c",
						"exec": [
							"pm.globals.unset(\"authorisation_id\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3d385970-ab7d-4e25-8a91-c6759d12b10d",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
							"",
							"pm.globals.set(\"authorisation_id\", authorisationId);",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Select scaStatus \", () => {",
							"    pm.expect(jsonData).to.have.property('scaStatus');",
							"    const scaStatus = jsonData.scaStatus;",
							"    pm.expect(scaStatus).to.eql('psuIdentified');",
							"});",
							"",
							"pm.test(\"Links exist\", () => {",
							"    pm.expect(jsonData).to.have.property('_links');",
							"    const _links = jsonData._links;",
							"",
							"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
							"    pm.expect(_links).to.have.property('scaStatus');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "PSU-ID",
						"value": "{{psu_id_none}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/periodic-payments/pain.001-sepa-credit-transfers/{{payment_id}}/authorisations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"periodic-payments",
						"pain.001-sepa-credit-transfers",
						"{{payment_id}}",
						"authorisations"
					]
				},
				"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
			},
			"response": []
		},
		{
			"name": "5. Update PSU data for payment initiation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5165a36b-f0fb-44aa-807a-1ba1ddef4cc9",
						"exec": [
							"pm.test('Status code is 200', () => {",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test('Sca status is finalised', () => {",
							"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
							"});",
							"",
							"pm.test(\"scaStatus link exists\", () => {",
							"    pm.expect(jsonData).to.have.property('_links');",
							"    const _links = jsonData._links;",
							"    pm.expect(_links).to.have.property('scaStatus');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "PSU-ID",
						"value": "{{psu_id_none}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/periodic-payments/pain.001-sepa-credit-transfers/{{payment_id}}/authorisations/{{authorisation_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"periodic-payments",
						"pain.001-sepa-credit-transfers",
						"{{payment_id}}",
						"authorisations",
						"{{authorisation_id}}"
					]
				},
				"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
			},
			"response": []
		},
		{
			"name": "6. Get Payment Initiation Authorisation Sub-Resources Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "63ca0499-d13c-4e9f-b400-4ea1987f8edd",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/periodic-payments/pain.001-sepa-credit-transfers/{{payment_id}}/authorisations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"periodic-payments",
						"pain.001-sepa-credit-transfers",
						"{{payment_id}}",
						"authorisations"
					]
				},
				"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
			},
			"response": []
		},
		{
			"name": "7. Read the SCA Status of the payment authorisation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f4ad6f93-26a9-47c0-9bb3-99ee33c349b1",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/periodic-payments/pain.001-sepa-credit-transfers/{{payment_id}}/authorisations/{{authorisation_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"periodic-payments",
						"pain.001-sepa-credit-transfers",
						"{{payment_id}}",
						"authorisations",
						"{{authorisation_id}}"
					]
				},
				"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
			},
			"response": []
		},
		{
			"name": "9. Payment initiation status request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "05ff2ddf-73f8-4630-85db-4f17baba7e2a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Test transaction status\", () => {",
							"    pm.expect(jsonData).to.have.property('transactionStatus');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, application/xml"
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/periodic-payments/pain.001-sepa-credit-transfers/{{payment_id}}/status",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"periodic-payments",
						"pain.001-sepa-credit-transfers",
						"{{payment_id}}",
						"status"
					]
				},
				"description": "Check the transaction status of a payment initiation."
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}
