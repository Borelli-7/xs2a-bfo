{
	"info": {
		"_postman_id": "847aace4-8c62-4708-8646-aa13fb6094c3",
		"name": "AIS Consent errorful requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Errorful requests",
			"item": [
				{
					"name": "Consent unknown",
					"item": [
						{
							"name": "1. Get Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3d3c1b0-f3d6-4c7b-b38a-63acca61cab7",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const jsonData = pm.response.json();",
											"    const error = jsonData.tppMessages[0];",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/unknown_id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"unknown_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Delete Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e4eff9c-22b7-4d08-8255-ba5a7109c93e",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const jsonData = pm.response.json();",
											"    const error = jsonData.tppMessages[0];",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/unknown_id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"unknown_id"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						},
						{
							"name": "3. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2da7b3b2-7828-4d8f-a39c-d7bbcfec0bc6",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const jsonData = pm.response.json();",
											"    const error = jsonData.tppMessages[0];",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c90d6672-6f5f-4588-8c50-026786e2c20b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/unknown_id/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"unknown_id",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "4. Get Consent Authorisation Sub-Resources Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af94ae93-76d4-4300-965a-47c6f15f096d",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const jsonData = pm.response.json();",
											"    const error = jsonData.tppMessages[0];",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/unknown_id/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"unknown_id",
										"authorisations"
									]
								},
								"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
							},
							"response": []
						},
						{
							"name": "5. Read the SCA status of the consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8060efe-040c-47fb-8f48-2324c82b5cfb",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const jsonData = pm.response.json();",
											"    const error = jsonData.tppMessages[0];",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/unknown_id/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"unknown_id",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "6. Update PSU Data for consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c5c15a1-212a-4392-8745-fe0206a85f99",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const jsonData = pm.response.json();",
											"    const error = jsonData.tppMessages[0];",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/unknown_id/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"unknown_id",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "7. Get consent status request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6c137f8-e32f-48cc-aff2-391bd5661ca6",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const jsonData = pm.response.json();",
											"    const error = jsonData.tppMessages[0];",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/unknown_id/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"unknown_id",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent dedicated EMBEDDED = wrong Tpp in certificate",
					"item": [
						{
							"name": "1. Update ASPSP profile settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a22d7f73-2cbb-4159-81f5-23f91fe273e4",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ce8bee0-a540-4520-aa00-73696cb42c02",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. create consent dedicated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e95aee17-2f2c-4171-858c-07c21759c40b",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56753d61-938a-4cca-8a7b-61b745252c9e",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfd83286-b8a1-42e8-b0d7-c909a1b4f7c9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e8ae32a7-c29b-4d8b-8ae5-961de61247da",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data for consents WRONG CERTIFICATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba3cb664-6b87-41d3-985b-c40c2106f233",
										"exec": [
											"pm.test('Status code is 403', () => {",
											"   pm.response.to.have.status(403);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('TppMessages and error are exist', () => {",
											"    ",
											"    pm.expect(jsonData).to.have.property('tppMessages');",
											"    ",
											"    var error = jsonData.tppMessages[0];",
											"       ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "{{wrong-certificate}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6. Update PSU Data for consents",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd40459c-d410-4dc2-b1d5-96b75ac96d67",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6. Update PSU Data for consents finalization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "616d3245-3461-41d4-a2ea-8db9791e0794",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "7. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78bb8f04-6ec8-4689-bce1-1fb9d24d3b05",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"account_id\", jsonData.accounts[0].resourceId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount).to.have.property('_links');",
											"        pm.expect(firstAccount._links).to.have.property('balances');",
											"        pm.expect(firstAccount._links).to.have.property('transactions');",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d220abdd-5474-44dd-b958-d0a4028ae956",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "8. Read Account List WRONG CERTIFICATE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88684be1-2cbf-448c-ae57-6d237d74b55e",
										"exec": [
											"pm.test('Status code is 400', () => {",
											"   pm.response.to.have.status(400);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('TppMessages and error are exist', () => {",
											"    ",
											"    pm.expect(jsonData).to.have.property('tppMessages');",
											"    ",
											"    var error = jsonData.tppMessages[0];",
											"       ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
											"    ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1d4189-f20f-4f03-9f13-82ba3bd6b637",
										"exec": [
											"pm.globals.unset(\"account_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "{{wrong-certificate}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						}
					],
					"description": "Manual TAN copying required",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2c0e729d-df36-4ebb-857f-49fa466ca336",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4f5267db-3ff2-4c67-9423-a4931b83c3e8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent requests Invalid TPP",
					"item": [
						{
							"name": "1. Update ASPSP profile settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e31454d4-11ea-4c0d-b9dc-5d18c62cde3e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1ac2ae5-1534-4a65-b17b-d60df955ea75",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create dedicated consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fabd821c-ff3e-4767-8a15-7ead7c60d1ce",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "51570d0a-be00-4cfc-bc5a-7449b48dbf39",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent with different TPP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34f5f3f2-a9b0-4059-bdd9-6ab3333c0e30",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"tppMessages is present\", () => {",
											"      pm.expect(jsonData).to.have.property('tppMessages');",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const error = jsonData.tppMessages[0];",
											"    ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"    pm.expect(error.text).to.eql('TPP certificate doesn\\’t match the initial request');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce053eb9-d172-4f18-ad3c-b88fb60ef0b2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "{{wrong-certificate}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a2820ea-eef0-4b09-820d-4e5534008064",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84074d38-4c0f-4aec-ac37-d90a49c580ab",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "6. Update PSU Data for consents with different TPP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fdcc59a-2e13-4940-93ba-89b30b3e111b",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"tppMessages is present\", () => {",
											"      pm.expect(jsonData).to.have.property('tppMessages');",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const error = jsonData.tppMessages[0];",
											"    ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "{{wrong-certificate}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "7. Update PSU Data for consents",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33034b5f-c0d1-4265-a2dc-6deae8792564",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "8. Get Consent from XS2A with different TPP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "059c6a2d-b5a1-4719-90be-aa50c8d51c61",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"tppMessages is present\", () => {",
											"      pm.expect(jsonData).to.have.property('tppMessages');",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const error = jsonData.tppMessages[0];",
											"    ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "{{wrong-certificate}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "9. Get Consent from XS2A",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e1865d4-4f06-4999-b4b8-e0f9757654dd",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Result validator\", () => {",
											"      pm.expect(jsonData).to.have.property('access');",
											"       pm.expect(jsonData).to.have.property('recurringIndicator');",
											"       pm.expect(jsonData).to.have.property('validUntil');",
											"       pm.expect(jsonData).to.have.property('frequencyPerDay');",
											"       pm.expect(jsonData).to.have.property('lastActionDate');",
											"       pm.expect(jsonData).to.have.property('consentStatus');",
											"     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "Returns the content of an account information consent object.  This is returning the data for the TPP especially in cases,  where the consent was directly managed between ASPSP and PSU e.g. in a re-direct SCA Approach. "
							},
							"response": []
						},
						{
							"name": "10. Get Consent Authorisation Sub-Resources Request with different TPP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83b8d666-e1ce-4f2b-b29b-787acc769501",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"tppMessages is present\", () => {",
											"      pm.expect(jsonData).to.have.property('tppMessages');",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const error = jsonData.tppMessages[0];",
											"    ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "{{wrong-certificate}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
							},
							"response": []
						},
						{
							"name": "11. Get Consent Authorisation Sub-Resources",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20f8537a-fa64-4693-b147-b6154981d4a5",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
							},
							"response": []
						},
						{
							"name": "12. Read the SCA status of the consent authorisation with different TPP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5caa9166-c697-46fd-a73b-738aa0e43ef8",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"tppMessages is present\", () => {",
											"      pm.expect(jsonData).to.have.property('tppMessages');",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const error = jsonData.tppMessages[0];",
											"    ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "{{wrong-certificate}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "13. Read the SCA status of the consent authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3097fd35-0586-46f9-900e-f4913acb5b22",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "14. Consent status request with different TPP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f353f936-60ce-42e9-b498-751f13436abb",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"tppMessages is present\", () => {",
											"      pm.expect(jsonData).to.have.property('tppMessages');",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const error = jsonData.tppMessages[0];",
											"    ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "{{wrong-certificate}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "15. Consent status request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6d4ed41-3fc3-4d78-a77e-7300143b023f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/status",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"status"
									]
								},
								"description": "Read the status of an account information consent resource."
							},
							"response": []
						},
						{
							"name": "16. Delete Consent with different TPP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9edbe647-0d9c-45fb-8d05-4d4cb06a060e",
										"exec": [
											"pm.test(\"Status code is 403\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"tppMessages is present\", () => {",
											"      pm.expect(jsonData).to.have.property('tppMessages');",
											"});",
											"",
											"pm.test(\"Error code is CONSENT_UNKNOWN\", () => {",
											"    const error = jsonData.tppMessages[0];",
											"    ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "{{wrong-certificate}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						},
						{
							"name": "17. Delete Consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58a032b7-bde8-4977-9b81-2304ad70f6fb",
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}"
									]
								},
								"description": "The TPP can delete an account information consent object if needed."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a6337bb4-ffcd-45c3-93dc-7a5cc2d4f624",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a776e390-7f8d-474e-b607-d186e1b427f0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Account requests Invalid TPP",
					"item": [
						{
							"name": "1. Update ASPSP profile settings",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9b957ac-60f4-4f5f-8edd-c64453f3aca0",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e9718e4-d676-4e82-9b57-0a473fbdad6f",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Create dedicated consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0466890-b193-42f3-b9d7-da14e0f8ffc1",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c66e5ad-2d35-4b35-a81f-f718b9a1c153",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e6d1e67-620d-4503-81af-54555c5453c1",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80adcf6b-9c73-419a-9eaf-fe33c7faa441",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Update PSU Data for consents",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58a30dbb-c062-451a-8cd8-100cce5f47c8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is scaMethodSelected', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
											"});",
											"",
											"pm.test(\"Select authoriseTransaction method link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('authoriseTransaction');",
											"});",
											"",
											"pm.test(\"Select chosenScaMethod exist\", () => {",
											"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
											"    const chosenScaMethod = jsonData.chosenScaMethod;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
											"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
											"    ",
											"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
											"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
											"});",
											"",
											"pm.test(\"Challenge data exist\", () => {",
											"    pm.expect(jsonData).to.have.property('challengeData');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "6. Update PSU Data for consents finalization",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d073c57d-66f8-4073-bb10-2e7c14f94bd4",
										"exec": [
											"pm.test('Status code is 200', () => {",
											"   pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Sca status is finalised', () => {",
											"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
											"});",
											"",
											"pm.test(\"Select scaStatus link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    pm.expect(_links).to.have.property('scaStatus');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						},
						{
							"name": "7. Read Account List with different TPP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b70187f3-d9d2-4727-ba8e-af44d51c6939",
										"exec": [
											"pm.test('Status code is 400', () => {",
											"   pm.response.to.have.status(400);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('TppMessages and error exist', () => {",
											"    ",
											"    pm.expect(jsonData).to.have.property('tppMessages');",
											"    ",
											"    var error = jsonData.tppMessages[0];",
											"       ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('CONSENT_UNKNOWN');",
											"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7537cfc8-431a-45eb-834e-53c6257fbfc9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "tpp-qwac-certificate",
										"value": "{{wrong-certificate}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						},
						{
							"name": "8. Read Account List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d130826-da41-4e79-97de-3d12cc547ff2",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.globals.set(\"account_id\", jsonData.accounts[0].resourceId);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data exists\", () => {",
											"    if (jsonData.accounts.length > 0) {",
											"        const firstAccount = jsonData.accounts[0];",
											"        ",
											"        pm.expect(firstAccount).to.have.property('_links');",
											"        pm.expect(firstAccount._links).to.have.property('balances');",
											"        pm.expect(firstAccount._links).to.have.property('transactions');",
											"        pm.expect(firstAccount).to.have.property('resourceId');",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "826e21b8-9a73-4933-8b56-264f17eb1b77",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Consent-ID",
										"value": "{{consent_id}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"accounts"
									],
									"query": [
										{
											"key": "withBalance",
											"value": "{{with_balance}}"
										}
									]
								},
								"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "da759d61-501a-4a4c-96e3-b5fe24e398c7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "924c7279-9ca0-42fd-860c-587d564b2ddb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update PSU Data with failed authorisation",
					"item": [
						{
							"name": "1. Set embedded SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "650516c1-8545-4481-a460-7905f55eb109",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create dedicated consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aeb8b7bf-d01d-4014-8241-3156f738eda0",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Update PSU authentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
											"",
											"    if (updatePsuAuthentication === undefined) {",
											"       pm.expect().fail();",
											"    }",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);",
											"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "591f9353-dde4-4b8c-816c-2eadd32d9ddd",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Start the authorisation process for a consent",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0db62321-f66b-41ca-b25e-ca3186d879fe",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"updatePsuAuthentication link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
											"});",
											"",
											"pm.test(\"Select scaStatus \", () => {",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('psuIdentified');",
											"});",
											"",
											"pm.globals.set(\"authorisation_id\", authorisationId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f45a72b1-5a84-49e0-b84a-482c8cdf1216",
										"exec": [
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "4. Start another authorisation with same PSU",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6622a62-a945-450a-ba3d-6958d6a2c1e6",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ab0d3da-4725-4d00-a4f4-99e0d42894bd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations"
									]
								},
								"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
							},
							"response": []
						},
						{
							"name": "5. Read the SCA status of the first authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea909662-2b46-41a6-a079-b1694ea2e973",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"scaStatus is failed\", () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('scaStatus');",
											"    const scaStatus = jsonData.scaStatus;",
											"    pm.expect(scaStatus).to.eql('failed');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
							},
							"response": []
						},
						{
							"name": "6. Update PSU Data for consents with Failed authorisation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "960b194a-5b54-44f6-8a07-c61b621dcd99",
										"exec": [
											"pm.test(\"Status code is 409\", () => {",
											"    pm.response.to.have.status(409);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"tppMessages is present\", () => {",
											"      pm.expect(jsonData).to.have.property('tppMessages');",
											"});",
											"",
											"pm.test(\"Error code is STATUS_INVALID\", () => {",
											"    const error = jsonData.tppMessages[0];",
											"    ",
											"    pm.expect(error).to.have.property('category');",
											"    pm.expect(error).to.have.property('code');",
											"    pm.expect(error).to.have.property('text');",
											"       ",
											"    pm.expect(error.category).to.eql('ERROR');",
											"    pm.expect(error.code).to.eql('STATUS_INVALID');",
											"    pm.expect(error.text).to.eql('The addressed resource does not allow additional authorisation');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents",
										"{{consent_id}}",
										"authorisations",
										"{{authorisation_id}}"
									]
								},
								"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "971575f7-fe10-4a8b-865c-300626099744",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6c23ad92-7b60-4730-8622-2ae8384726a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update PSU data for consent with incorrect PSU-ID in header",
					"item": [
						{
							"name": "Consent dedicated EMBEDDED implicit 1 SCA method with incorrect PSU-ID in header",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a859006-f489-46cd-b00e-a7356c8eb939",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d7f53db-85c1-42b2-b056-8cc8600e0a54",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create consent dedicated with iban single",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24bf722f-31f1-4328-889a-96ebea118898",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Update PSU authentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
													"",
													"    if (updatePsuAuthentication === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60d32780-0497-45e5-8742-76f7096c72f0",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Update PSU Data for consents with PSU-ID multiple",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67d7c611-b961-436c-ad2e-97e19dce88f7",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Consent dedicated EMBEDDED explicit 1 SCA method with incorrect PSU-ID in header and no PSU-ID in start athourisation",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1471ba1d-01de-406c-ba27-a98701d5e9db",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d42ad8f-ac83-4401-8389-2fff86ee82b8",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create consent dedicated wiht iban single",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e2d971d-fc9c-4e61-a0fa-702e382a4c64",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Update PSU authentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
													"",
													"    if (updatePsuAuthentication === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79cb69a7-7fa5-41c1-ad72-df4fcc209319",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a consent without PSU-ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15c5a406-8694-47e2-9124-baee4a7ffa5c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"updatePsuAuthentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "72888ea0-ec20-4554-a138-5d25aebf997e",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Update PSU Data for consents with PSU-ID multiple",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e71466d5-0d6e-4024-a677-aa0fba5a2b69",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Consent dedicated EMBEDDED explicit 1 SCA method with incorrect PSU-ID in header",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1068178b-aa9a-4c0d-a57b-8fb448b592a5",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8fa92d9-e463-4efb-9025-b1a01719e5fc",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"both\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"signingBasketSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n       \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Create consent dedicated with iban single",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11999f88-52b7-4bd1-8788-a5deb7036df2",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Update PSU authentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
													"",
													"    if (updatePsuAuthentication === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60772dec-7c44-4567-bc05-1e5a0676fcab",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ],\n    \"transactions\": [\n      {\n        \"currency\": \"EUR\",\n\t\t\"iban\": \"{{iban_single}}\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a consent wiht PSU-ID multiple",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c43fcbf7-db68-4395-89f5-4b503b28b13a",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"updatePsuAuthentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "116437b8-a794-4bb6-be0e-da70b1c9f68f",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Update PSU Data for consents with PSU-ID multiple",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c7bbc46-d4ad-4555-94e6-3016ba19a989",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Credentials invalid",
					"item": [
						{
							"name": "wrong PSU-ID",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55129d5d-ad3c-4a31-b518-f899c32dab09",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. create consent available accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "717343b3-7788-44cc-b9f3-fa77ef1ccd7b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Update PSU authentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
													"",
													"    if (updatePsuAuthentication === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8cd83ea0-e4a3-492f-a69f-8a5083a8108b",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Start the authorisation process for a consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed68976c-e747-44b8-9cba-e766f694d1cc",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"updatePsuAuthentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3b769523-1b87-4b57-868b-956577879a87",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "4. Update PSU Data for consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ecf1b3b-ddae-4619-bd76-5298f7a37c7d",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const error = jsonData.tppMessages[0];",
													"    ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"    pm.expect(error.text).to.eql('The PSU-ID cannot be matched by the addressed ASPSP or is blocked, or a password resp. OTP was not correct');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "5. Read the SCA status of the consent authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "408284a5-ec38-477d-a6d9-9270b9d216ee",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Sca status is failed\", function(){",
													"    pm.expect(jsonData.scaStatus).to.eql('failed');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fbaf2c7c-2fb6-431b-925c-927581eb50fe",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "30842663-c6f5-478d-9236-1d5f7bb40e35",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "wrong Password",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc658921-6ce5-4e1a-9cbc-468e631a5720",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. create consent available accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5872df8d-f3bd-4b75-818d-0fd63df2877f",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Update PSU authentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
													"",
													"    if (updatePsuAuthentication === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26ee7baf-d858-4b66-8e46-d7297e6b3905",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Start the authorisation process for a consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "513bbcf4-502f-4cf0-8979-2c1f0e75e3ae",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"updatePsuAuthentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "005c7578-5087-4567-a722-2129c71a1a4a",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "4. Update PSU Data for consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "580f39bb-5aa2-426a-b5fc-9bc438e240b0",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const error = jsonData.tppMessages[0];",
													"    ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"    pm.expect(error.text).to.eql('You have 2 attempts to enter valid credentials');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU Data for consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81c09556-bf8e-4bca-bfb7-7cb56675257c",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const error = jsonData.tppMessages[0];",
													"    ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"    pm.expect(error.text).to.eql('You have 1 attempts to enter valid credentials');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6. Read the SCA status of the consent authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "311a0379-54c0-4fd6-8ce8-70f9eca3f39e",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Sca status is psuIdentified\", function(){",
													"    pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
									},
									"response": []
								},
								{
									"name": "7. Update PSU Data for consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d6f6413-2882-4b6b-981c-d6cedc582244",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const error = jsonData.tppMessages[0];",
													"    ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"    pm.expect(error.text).to.eql('The PSU-ID cannot be matched by the addressed ASPSP or is blocked, or a password resp. OTP was not correct');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "8. Read the SCA status of the consent authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3554e150-a6e2-46a0-97a9-da2190023ba4",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Sca status is failed\", function(){",
													"    pm.expect(jsonData.scaStatus).to.eql('failed');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f668027d-a9cc-42a9-91d2-cfc0d00cdafa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8e0a0866-bcc5-4375-ad55-0c968a8c3e27",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "wrong AuthenticationMethod",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9981232c-9569-4299-8cfe-6749162705e5",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. create consent available accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5da42c8b-2b4a-4f99-94ff-2bbd8402836b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Update PSU authentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
													"",
													"    if (updatePsuAuthentication === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32a74e19-014b-4f2f-9203-55b96ef29507",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Start the authorisation process for a consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "874106ff-1ea7-4da4-89a9-91f78989d34a",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"updatePsuAuthentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f51e164f-db56-4dff-834b-bafb4d1cfa85",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "4. Update PSU Data for consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad31cba6-50bf-4dc1-a51e-c54dd61537a8",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.be.above(1);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"    ",
													"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU Data for consent choose SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce97b2cf-359c-4422-ac9c-65285fc0fbab",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const error = jsonData.tppMessages[0];",
													"    ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"    pm.expect(error.text).to.eql('The PSU-ID cannot be matched by the addressed ASPSP or is blocked, or a password resp. OTP was not correct');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"wrong\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6. Read the SCA status of the consent authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c645a2db-c78f-4f2d-a80c-9451b9a7fac0",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Sca status is failed\", function(){",
													"    pm.expect(jsonData.scaStatus).to.eql('failed');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d69113a-4385-4136-b395-84c5a4591523",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cd57c622-b12c-45fc-b156-d9cec6e57866",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "wrong TAN",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59c545ad-1361-430e-9dc0-2dcf386d119c",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. create consent available accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b56fcec5-3ae3-47b0-bbca-a4af9184c0a5",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Update PSU authentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
													"",
													"    if (updatePsuAuthentication === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "889399a5-90de-4411-9bf3-16e233d8bb05",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Start the authorisation process for a consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fede9ad-4be9-4f2f-be7f-0f149578fbbc",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"updatePsuAuthentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f66a1344-8dba-4c48-b953-cfa81197c3fc",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "4. Update PSU Data for consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f274f69-03e9-448a-a516-98f2a7470792",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.be.above(1);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"    ",
													"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU Data for consent choose SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b46eaf3c-6d91-4b27-af0d-5de1d9157493",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6. Update PSU Data for consents finalization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "638a003c-b359-4793-bc0f-2021d9f4413f",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const error = jsonData.tppMessages[0];",
													"    ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"    pm.expect(error.text).to.eql('You have 2 attempts to enter valid TAN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"wrong\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "7. Update PSU Data for consents finalization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3d88823-fc2b-47a8-afe7-39ec29c2e0ae",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const error = jsonData.tppMessages[0];",
													"    ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"    pm.expect(error.text).to.eql('You have 1 attempts to enter valid TAN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"wrong\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "8. Read the SCA status of the consent authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20b2ad8f-da2b-4342-bba7-008f7bed8ac2",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Sca status is scaMethodSelected\", function(){",
													"    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
									},
									"response": []
								},
								{
									"name": "9. Update PSU Data for consents finalization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b527e9bd-6d9e-47ac-9b43-dbb47393bcd5",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const error = jsonData.tppMessages[0];",
													"    ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"    pm.expect(error.text).to.eql('Your SCA authorization is FAILED please create a new one.');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"wrong\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "10. Read the SCA status of the consent authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e824313-8f83-4d47-ae8d-1f2248324a8e",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Sca status is failed\", function(){",
													"    pm.expect(jsonData.scaStatus).to.eql('failed');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cba3b198-5a52-4bd2-a525-bcf62faadb74",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1c04be43-b42a-4309-ad24-c419bc269e1e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "wrong Password and then correct Password",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0916457-6324-4224-8a50-d3f5ee971d8a",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. create consent available accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8230f64-cfc2-4067-b4f7-5faa06724e06",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Update PSU authentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
													"",
													"    if (updatePsuAuthentication === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0b4ebac3-2683-4920-be9b-75336b70d172",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Start the authorisation process for a consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37b662b3-e0a4-44e2-9405-96065b3588fb",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5112e912-674d-4206-af01-ef3e14448523",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "4. Update PSU Data for consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42a59c1d-4354-457b-94fb-8f0442d439ef",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const error = jsonData.tppMessages[0];",
													"    ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"    pm.expect(error.text).to.eql('You have 2 attempts to enter valid credentials');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU Data for consent with correct password",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7729dfa5-b85a-45b3-ab48-8d742ee5d579",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83556d63-4540-443b-8475-25f55f5dabd8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "16358a6e-a0f4-4c3d-b508-9a6c5a666a9c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "wrong TAN and then correct TAN",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcba10e6-102f-4578-a655-354b478e8453",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. create consent available accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe372688-4b77-412e-8512-8705f881346d",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Consent Id exists\", () => {",
													"   pm.expect(jsonData).to.have.property('consentId');",
													"});",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Update PSU authentication link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    var updatePsuAuthentication = _links.updatePsuAuthentication.href;",
													"",
													"    if (updatePsuAuthentication === undefined) {",
													"       pm.expect().fail();",
													"    }",
													"});",
													"",
													"pm.test(\"Consent status is received\", () => {",
													"    pm.expect(jsonData.consentStatus).to.eql('received');",
													"});",
													"",
													"pm.globals.set(\"consent_id\", jsonData.consentId);",
													"pm.globals.set(\"updatePsuAuthentication\", jsonData._links.updatePsuAuthentication);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "398eb93a-a0de-43bc-a14d-b912064adb97",
												"exec": [
													"pm.globals.unset(\"consent_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "psu-ip-address",
												"value": "{{ip_address}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"access\": {\n    \"accounts\": [],\n    \"balances\": [],\n    \"availableAccounts\": \"allAccounts\",\n    \"transactions\": []\n  },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Start the authorisation process for a consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c9b9b4c-e5a5-456f-87f3-5f7feadb2cc3",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Start authorisation link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1d90523b-3577-4cae-a92e-79e0c403bff2",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "4. Update PSU Data for consent",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5c59932-a3a4-450f-8f91-e7f5b8c97401",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU Data for consents finalization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0da50d24-29bb-427e-af4f-840264b8949b",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const error = jsonData.tppMessages[0];",
													"    ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"    pm.expect(error.text).to.eql('You have 2 attempts to enter valid TAN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"wrong\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6. Update PSU Data for consents finalization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbb7c675-171b-44bc-b9c2-331c80b27e3a",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"consents",
												"{{consent_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d904f78b-b05c-47fa-a417-da27ea3a9703",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3b1fb8f5-c515-4f2b-bce5-691a67a0af40",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "92ae2d98-d07c-49e5-871e-79778df0575f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5971ad04-056a-4bbb-b096-da27cc34544d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}