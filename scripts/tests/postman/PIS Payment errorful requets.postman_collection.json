{
	"info": {
		"_postman_id": "81821404-d27c-42ec-be82-d55036a305da",
		"name": "PIS Payment errorful requets",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Errorful requests",
			"item": [
				{
					"name": "wrong TPP in certificate",
					"item": [
						{
							"name": "Single payment initiation EMBEDDED  = wrong Tpp in certificate",
							"item": [
								{
									"name": "1. Enable signing basket support in ASPSP profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "533eb350-085f-4bb1-985d-a12641a4cdf9",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4444447b-a6f5-447c-8a93-fa1049833ce1",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "baae4b0e-ba79-45df-bf5b-95954a674019",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('startAuthorisation');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6b79f3c0-38e0-415b-bb26-03e8a4a3a931",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1b709cb1-8844-41cf-8114-f8f51b1a0c25",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a9476ccd-b259-4936-aecf-83a3d5fbd4b2",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf324204-0c88-40db-afd4-9fd33b9e51a1",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.be.above(1);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"    ",
													"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6. Update PSU data chose scaMethod WRONG CERTIFICATE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90a64c91-0235-44b7-9f23-f410f322830c",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('CERTIFICATE_INVALID');",
													"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "tpp-qwac-certificate",
												"value": "{{wrong-certificate}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "7. Update PSU data for payment initiation chose scaMethod",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "065eae63-9bc7-45c8-85a0-4938f8bbbb84",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "8. Update PSU data for payment initiation finalized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e49d673-f3b1-42b8-84ca-1d0496fc06ed",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "9. Get Payment Initiation Authorisation Sub-Resources Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ff1b874-d41b-487b-b096-add0ae46b050",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
									},
									"response": []
								},
								{
									"name": "10. Get Payment Initiation Authorisation  WRONG CERT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10405e6a-18d7-4d37-ae14-547ba69a52c3",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('CERTIFICATE_INVALID');",
													"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "tpp-qwac-certificate",
												"value": "{{wrong-certificate}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
									},
									"response": []
								},
								{
									"name": "11. Read the SCA Status of the payment authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6cfe670-a739-4442-991c-2c861bc51f69",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
									},
									"response": []
								},
								{
									"name": "12. Read the SCA Status of the payment authorisation WRONG CERT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f35a8e57-65fb-496f-9930-9deb180998dd",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('CERTIFICATE_INVALID');",
													"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "tpp-qwac-certificate",
												"value": "{{wrong-certificate}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
									},
									"response": []
								},
								{
									"name": "13. Get Payment Information",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26de54d3-500f-4c1c-8231-fa215d1af0a3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Mandated fields exist\", () => {",
													"    pm.expect(jsonData).to.have.property('debtorAccount');",
													"    pm.expect(jsonData).to.have.property('instructedAmount');",
													"    pm.expect(jsonData).to.have.property('creditorAccount');",
													"    pm.expect(jsonData).to.have.property('creditorName');",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml, multipart/form-data"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										},
										"description": "Returns the content of a payment object"
									},
									"response": []
								},
								{
									"name": "14. Get Payment Information WRONG CERT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecb5ef64-2964-419f-9422-16511fe319a0",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('CERTIFICATE_INVALID');",
													"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml, multipart/form-data",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "tpp-qwac-certificate",
												"value": "{{wrong-certificate}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										},
										"description": "Returns the content of a payment object"
									},
									"response": []
								},
								{
									"name": "15. Payment initiation status request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9dba7ba8-3e76-4e56-abff-b69b344dc7b5",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Test transaction status\", () => {",
													"    pm.expect(jsonData).to.have.property('transactionStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								},
								{
									"name": "16. Payment initiation status request WRONG CERT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95d93047-7e6d-44b3-9ca3-82c032230e85",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('TppMessages and error are exist', () => {",
													"    ",
													"    pm.expect(jsonData).to.have.property('tppMessages');",
													"    ",
													"    var error = jsonData.tppMessages[0];",
													"       ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('CERTIFICATE_INVALID');",
													"    pm.expect(error.text).to.eql('TPP certificate doesn’t match the initial request');",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "tpp-qwac-certificate",
												"value": "{{wrong-certificate}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1b2eae5c-7800-4035-b773-ea7162693aa6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9ddfb6dc-fd34-4506-9eff-480d00894160",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update PSU Data with failed authorisation",
					"item": [
						{
							"name": "Payment Initiation",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1300534c-fbc1-4416-ae89-94121b57805a",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7d4c3d0-5310-4f48-81d5-7e96762d87fe",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6e503b97-ad0b-4262-a6a1-c31f9835ae7f",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "3. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ba9f49da-9f8b-4d16-98e2-5de3171c06a4",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "21dca11b-70f8-4cb8-920a-81e729bfc284",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "4. Start another authorisation with same PSU",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d7be1b20-ae93-43af-8de5-2cf1872618df",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3170f4b8-20e0-4817-bc28-016f212a2ce5",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "5. Read the SCA status of the first authorisation Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3593bfea-2b6d-4adc-b442-8482de32b8fe",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"scaStatus is failed\", () => {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('failed');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
									},
									"response": []
								},
								{
									"name": "6. Update PSU Data for consents with Failed authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0234589f-c98b-4ccb-a8ba-c682b02674d6",
												"exec": [
													"pm.test(\"Status code is 409\", () => {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"tppMessages is present\", () => {",
													"      pm.expect(jsonData).to.have.property('tppMessages');",
													"});",
													"",
													"pm.test(\"Error code is STATUS_INVALID\", () => {",
													"    const error = jsonData.tppMessages[0];",
													"    ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('STATUS_INVALID');",
													"    pm.expect(error.text).to.eql('The addressed resource does not allow additional authorisation');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec2af16b-4dd9-482e-a520-6d6f7be6c9f8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b5361de2-b035-4564-bd44-35a45cf5449b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payment Cancellation",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f1fc7ae-a967-48df-a82a-08a15d5678d3",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b3defd2-54f9-4287-94b0-10fe68523410",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "693d3c15-7c83-46e6-b4f9-bea9e72bd409",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_none}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_none}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "3. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bb5155ed-a37b-42cc-9d53-fdb8bc15fee4",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "aefbe644-3e94-4335-9902-e7eff49cb549",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "4. Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fffcc2f-3e56-45ef-9419-a2e4824f6f65",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is exempted', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('exempted');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "5. Cancel payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac68026d-00e1-4d28-9a34-8ddc2cfc211b",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Start the authorisation process for a payment cancellation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "116b3789-507a-486f-990f-f1bf170781ac",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Select authorisationId \", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    ",
													"    pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');  ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c005fec4-ebe4-4991-8de0-1cba3af7b883",
												"exec": [
													"pm.globals.unset(\"cancellation_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "X-Request-ID",
												"type": "text",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "7. Start another authorisation with same PSU",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea8c4b6d-c534-418c-bce8-3f579c6c431b",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "56eab3b3-be95-499f-b3db-e1efecf198dd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"type": "text",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "X-Request-ID",
												"type": "text",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "8. Read the SCA status of the first authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d908b26-817e-4e9c-8260-9a58567bffb7",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"scaStatus is failed\", () => {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('failed');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a consent initiation's authorisation sub-resource. "
									},
									"response": []
								},
								{
									"name": "9. Update PSU Data for consents with Failed authorisation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a829938f-d49b-4ccb-aac0-dadd98421b04",
												"exec": [
													"pm.test(\"Status code is 409\", () => {",
													"    pm.response.to.have.status(409);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"tppMessages is present\", () => {",
													"      pm.expect(jsonData).to.have.property('tppMessages');",
													"});",
													"",
													"pm.test(\"Error code is STATUS_INVALID\", () => {",
													"    const error = jsonData.tppMessages[0];",
													"    ",
													"    pm.expect(error).to.have.property('category');",
													"    pm.expect(error).to.have.property('code');",
													"    pm.expect(error).to.have.property('text');",
													"       ",
													"    pm.expect(error.category).to.eql('ERROR');",
													"    pm.expect(error.code).to.eql('STATUS_INVALID');",
													"    pm.expect(error.text).to.eql('The addressed resource does not allow additional authorisation');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5a649bcf-fb6f-4219-8c27-864f14f891f9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c2691763-5fea-4066-8384-dd8445348dc2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update PSU data for payment initiation with incorrect PSU-ID in header",
					"item": [
						{
							"name": "Single payment initiation implicit EMBEDDED multiple SCA methods with incorrect PSU-ID in header for update PSU data",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76fe2497-40ec-4722-bd3e-417e8479d739",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f818ba4a-546b-4b78-a0a2-78e6ddc8bbca",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request with iban multiple",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de883130-5337-41e6-8f63-fe7d51dff1bb",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ef1c87db-0b41-4b51-9dff-ce7787d67f74",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Update PSU data for payment initiation with PSU-ID single",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a70fd752-44d9-4ab4-96e3-d5a3143e5acf",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment initiation explicit EMBEDDED multiple SCA methods with incorrect PSU-ID in header for update PSU data and no PSU-ID header for authorisation",
							"item": [
								{
									"name": "1. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c266cda4-6409-4468-897b-efabb45ae6c4",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42f0ac29-9580-4e1d-ab0c-7956f6d1055d",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request with iban multiple",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34aea69b-5ea0-493f-86fd-f72e1dd21761",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b6a90c70-ad14-4b64-8b9d-d0f391b3f3d1",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation without PSU-ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4daafefc-8dcc-4a75-b704-b55a39952ec2",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9af403c0-77f9-4d5e-805b-c06167b6edca",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('received');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation with PSU-ID single",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1363118-44ac-4530-9c8d-163458f93c27",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment initiation explicit EMBEDDED multiple SCA methods with incorrect PSU-ID in header for update PSU data",
							"item": [
								{
									"name": "1. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74b936b2-24b1-4f90-bff4-b86bd96d4b9b",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74f726bd-38c5-4ad7-b2cf-22de3f820be8",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request with iban multiple",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09c29811-0df3-4765-b90d-277d44376a67",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b1953c94-a4e7-4c64-a1d7-85c53723ce5f",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation wiht PSU-ID none",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e5a7b53c-b27b-447f-8c2c-e756f635bbba",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "06fa1d62-b145-4697-a0c4-12ea05e67675",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation with PSU-ID none",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddf4c54d-c6c5-45c3-a4dd-75ec4d3a76ff",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_none}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment initiation explicit EMBEDDED multiple SCA methods with incorrect PSU-ID in header for update PSU data and no PSU-ID header for authorisation and succesfull repeated authorisation",
							"item": [
								{
									"name": "1. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f9e6eca-c528-4acf-96e0-a34c18e0bbc0",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "893f3170-3938-44f9-bcab-8eb39aef2c10",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request with iban multiple",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02487e21-fb12-420a-946b-51a7f066901c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('startAuthorisation');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c6fdc804-1307-48c5-8a6b-d06b6057d9cf",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation without PSU-ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ab75b80a-c9bb-429d-9108-cc96bcbc7349",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9c0f3f66-13ed-4fe0-a094-9567fa3275f0",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('received');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation with PSU-ID single",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a19c37ff-8de1-4e0d-9470-9abb7ca5aaf4",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Start the authorisation process for a payment initiation again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45645f1d-5bf0-41ce-aeb7-e33a36bd9b13",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73ee2eed-0ffb-4554-97eb-a583578ec535",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('received');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"disabled": true
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update PSU data for payment cancellation with incorrect PSU-ID in header",
					"item": [
						{
							"name": "Single payment cancellation implicit EMBEDDED multiple SCA mehtods with incorrect PSU-ID in header",
							"item": [
								{
									"name": "1. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "795b278d-d770-4cc3-9630-e46655efbb6c",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2192779b-2f39-422f-a658-566af51fd5de",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request with iban multiple",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64236ade-8ade-4e03-9a1a-e9fcbd6b2195",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e44ece99-cbc4-431f-a793-7105f314bdb9",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1da51f48-57b4-453e-8531-12dc0a84db7d",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.be.above(1);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"    ",
													"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation chose SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29f306e3-fc69-4537-b558-f4b6a6c9886f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Update PSU data for payment initiation finalized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2352fe4-9024-4295-97ca-f4ea8c048926",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.. Cancel payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24dd1fd9-fe72-4fe9-959b-7249291a2818",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transcation status is ACSP\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"});",
													"",
													"const cancellationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"pm.globals.set(\"cancellation_id\", cancellationId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update PSU data for payment cancellation with iban single",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1d3e5d8-8941-4337-92fe-89ab2e248124",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{cancellation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{cancellation_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment cancellation explicit EMBEDDED multiple SCA mehtods with incorrect PSU-ID in header and no PSU-ID in start authorisation",
							"item": [
								{
									"name": "1. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5deeb309-717c-4307-918e-a56c30f22e6b",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "910e3ffd-c031-4ba9-ab00-ccfac1aa4152",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request with iban multiple",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b4232b7-f31d-4482-8373-3e3aa1a41ee5",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "77fb79f6-e2e6-4dc5-8b64-67ae1166da87",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9b4b3cc1-92fc-4ea6-9f4d-e2d47b8444d7",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "915f7722-720d-4a49-b7e1-70007a087673",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93d87d59-df7a-4cf0-977e-17ba1b9b926c",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.be.above(1);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"    ",
													"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Update PSU data for payment initiation chose SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00711e6d-3847-42d3-9626-c2590b125249",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Update PSU data for payment initiation finalized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffaf1fd2-19a5-4e2c-89bb-5d8e4192002e",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.. Cancel payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cfe83f2-04e2-41a7-8af6-718487a67e50",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transcation status is ACSP\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Start the authorisation process for a payment initiation without PSU-ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0fb790cf-074b-4b46-b186-10d93f0aa027",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b2d90e3f-e74f-4ac0-9d00-091dcf74bc83",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Select authorisationId \", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    ",
													"    pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
													"});",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('received');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update PSU data for payment cancellation with PSU-ID single",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37074a93-17d2-4488-a919-681a7b555c4f",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment cancellation explicit EMBEDDED multiple SCA mehtods with incorrect PSU-ID in header",
							"item": [
								{
									"name": "1. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "542e7a3a-d275-4e1e-85e9-4dd74910ae7a",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e2ec44c-d04d-4956-bbef-e71b65218a1c",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request with iban multiple",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67aa66da-9465-4d8d-b89d-e545b8aadc34",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9be9370e-c791-438a-857d-3071cc80a94b",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "62623bae-d9c5-4215-a7b3-8afd95d686c1",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "506bed34-5968-49cc-998f-3feebd1b5615",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "943eff52-a9b6-459f-85aa-b7f873014e92",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.be.above(1);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"    ",
													"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Update PSU data for payment initiation chose SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97d93f53-144d-4eaf-95d0-bfa431eb8a3f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Update PSU data for payment initiation finalized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc611523-ff8d-4da6-a0d4-2a54d32beda4",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.. Cancel payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "095b04bb-369f-4dec-a0ee-da00fe1ffca7",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transcation status is ACSP\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Start the authorisation process for a payment initiation with PSU-ID single",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ef2ecc23-1017-4a84-bc78-090fb0b3def1",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a0347856-2d60-4198-9fdb-88cc73683036",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment cancellation explicit EMBEDDED multiple SCA mehtods with incorrect PSU-ID in header and successfull repeated authorisation",
							"item": [
								{
									"name": "1. Set ASPSP properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7de49a0-face-4520-b9d6-060243090c62",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "395c3d74-55a8-498e-9fbd-7f48cdfd8cad",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request with iban multiple",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58c650d2-4811-4670-8063-ab10b3f25cb0",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('startAuthorisation');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9b158093-a1f7-4af8-ab3b-2499a6e7ef19",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b397055b-3b34-45a8-8c15-6e0fb2747e35",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4c075328-a7e4-4cd4-9091-ca0b99e1396e",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac9972f7-2c3f-4c48-bf6e-8dacc330765e",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.be.above(1);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"    ",
													"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Update PSU data for payment initiation chose SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e161d0c7-c3f7-4801-b163-ec2841446154",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. Update PSU data for payment initiation finalized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4143ad6b-9a8d-4da8-b7ce-9b7ea9c90b1d",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8.. Cancel payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e2b5ac6-9589-4dc5-b62d-c8e966a15c57",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transcation status is ACSP\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Start the authorisation process for a payment initiation without PSU-ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bd89164d-67aa-471e-a526-c8b2e2909538",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fdb72bee-987b-4e14-9a4c-2a91712f010e",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Select authorisationId \", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    ",
													"    pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
													"});",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('received');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. Update PSU data for payment cancellation with PSU-ID single",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5309d6ad-a5e5-4d30-955e-339169709505",
												"exec": [
													"pm.test('Status code is 401', () => {",
													"   pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_single}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Start the authorisation process for a payment initiation again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff0d5cd2-5ef8-46a0-a3a3-68e5313979fe",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "932a6826-b74c-47ae-ae7e-01d94ac33bb6",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Select authorisationId \", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    ",
													"    pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
													"});",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('received');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Credentials invalid ",
					"item": [
						{
							"name": "Payment Initiation",
							"item": [
								{
									"name": "wrong PSU-ID",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0788cefd-97bd-43b8-bd2d-6b43d4e275e0",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set ASPSP properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9c98ff61-ed9d-4365-a968-49b962b8cf79",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\"\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": false\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Payment initiation request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cf6c69ae-2744-4f74-a86f-1313f1658f23",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Transcation status is RCVD\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    ",
															"});",
															"",
															"pm.test(\"Payment ID exists\", () => {",
															"    pm.expect(jsonData).to.have.property('paymentId');",
															"});",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"pm.globals.set(\"payment_id\", jsonData.paymentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a4506794-6ffa-4993-9f34-2abf012dce78",
														"exec": [
															"pm.globals.unset(\"payment_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}"
													]
												},
												"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
											},
											"response": []
										},
										{
											"name": "4. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "643575cc-ccac-4ba3-8ebb-758bd8dc493a",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('The PSU-ID cannot be matched by the addressed ASPSP or is blocked, or a password resp. OTP was not correct');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "5. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "95447f12-950f-4163-b7eb-0691085dc4b2",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is failed\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('failed');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										}
									],
									"description": "Manual TAN copying required",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7a8f4983-dfde-440e-a265-2ef6d7671337",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a68380ce-2661-4986-9ddc-1d558892862d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "wrong Password",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7aafe112-6bf5-4967-90c0-cf0686e2f2e8",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Payment initiation request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3d4bf584-2dca-4074-8708-f4350b4dc7d4",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Transcation status is RCVD\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    ",
															"});",
															"",
															"pm.test(\"Payment ID exists\", () => {",
															"    pm.expect(jsonData).to.have.property('paymentId');",
															"});",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"pm.globals.set(\"payment_id\", jsonData.paymentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e9810a06-ebcf-4c6b-a48a-a71f2a5b7964",
														"exec": [
															"pm.globals.unset(\"payment_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}"
													]
												},
												"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
											},
											"response": []
										},
										{
											"name": "3. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "466fa6e9-91b0-4575-9a51-ab48dcdcedb2",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('You have 2 attempts to enter valid credentials');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "4. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c6509c10-aa84-4d0b-8572-ad3c30e446b9",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('You have 1 attempts to enter valid credentials');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "5. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "427c6d6a-93c7-4732-a483-dd94e1703b90",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is psuIdentified\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										},
										{
											"name": "6. Update PSU data for payment initiatio",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a5a69878-528d-4bd0-a313-9da9dd6d4ff1",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('The PSU-ID cannot be matched by the addressed ASPSP or is blocked, or a password resp. OTP was not correct');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "7. Read the SCA Status of the payment authorisatio",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6205d2a5-e344-4d9c-b08b-1d449276478f",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is failed\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('failed');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										}
									],
									"description": "Manual TAN copying required",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "92c6443d-4326-415a-8b5d-1a20c74697d0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "88401bae-fd07-4c7e-9edf-7de22be7d1d7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "wrong AuthenticationMethod",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4e27dd8f-320f-4ec3-9311-fcd5dc595fde",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Payment initiation request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d2de869-e661-4fd8-8bb8-cc5b87aeaaa4",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Transcation status is RCVD\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    ",
															"});",
															"",
															"pm.test(\"Payment ID exists\", () => {",
															"    pm.expect(jsonData).to.have.property('paymentId');",
															"});",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"pm.globals.set(\"payment_id\", jsonData.paymentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fea6209a-71b0-4ca8-957b-f12fa2114860",
														"exec": [
															"pm.globals.unset(\"payment_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}"
													]
												},
												"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
											},
											"response": []
										},
										{
											"name": "3. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0f5e804e-2aa2-4326-a9d7-6409cb996b62",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is psuAuthenticated', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
															"});",
															"",
															"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
															"});",
															"",
															"pm.test(\"scaMethods exist\", () => {",
															"    pm.expect(jsonData).to.have.property('scaMethods');",
															"    const scaMethods = jsonData.scaMethods;",
															"    ",
															"    pm.expect(scaMethods.length).to.be.above(1);",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"    ",
															"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "4. Update PSU data for payment initiation chose SCA method",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4d09b8b4-6f64-4b3b-9625-fbe2695f90c1",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('The PSU-ID cannot be matched by the addressed ASPSP or is blocked, or a password resp. OTP was not correct');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"authenticationMethodId\": \"wrong\"        \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "5. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "60fce4e3-3838-4cc0-b3ea-591ed3f1b644",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is failed\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('failed');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										}
									],
									"description": "Manual TAN copying required",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0d733ea0-e9a7-40fd-a267-6ad8f2353fd7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3cdb77bd-6b5b-4a13-aba7-248c99840be2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "wrong TAN",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "26cdf0b8-5a62-4866-bc69-38bda3e94f7c",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Payment initiation request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3e98ab17-c412-43f3-8730-e5ed939fd2ec",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Transcation status is RCVD\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    ",
															"});",
															"",
															"pm.test(\"Payment ID exists\", () => {",
															"    pm.expect(jsonData).to.have.property('paymentId');",
															"});",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"pm.globals.set(\"payment_id\", jsonData.paymentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "71db75ac-365b-4522-8264-e8d9e2e655e5",
														"exec": [
															"pm.globals.unset(\"payment_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}"
													]
												},
												"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
											},
											"response": []
										},
										{
											"name": "3. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "41aacee3-5436-4894-9e7c-b84bd9713c6a",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is psuAuthenticated', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
															"});",
															"",
															"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
															"});",
															"",
															"pm.test(\"scaMethods exist\", () => {",
															"    pm.expect(jsonData).to.have.property('scaMethods');",
															"    const scaMethods = jsonData.scaMethods;",
															"    ",
															"    pm.expect(scaMethods.length).to.be.above(1);",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"    ",
															"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "4. Update PSU data for payment initiation chose SCA method",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "145f83e1-ed8c-4ae8-9330-c95661301903",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Select authoriseTransaction method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															"",
															"pm.test(\"Select chosenScaMethod exist\", () => {",
															"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
															"    const chosenScaMethod = jsonData.chosenScaMethod;",
															"    ",
															"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
															"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
															"    ",
															"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
															"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
															"});",
															"",
															"pm.test(\"Challenge data exist\", () => {",
															"    pm.expect(jsonData).to.have.property('challengeData');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "5. Update PSU data for payment initiation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6f2c94ec-4aaf-453b-a2e4-df4fe301cb75",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('You have 2 attempts to enter valid TAN');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"wrong\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "6. Update PSU data for payment initiation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "65c20642-4d07-4f16-9460-1f570b86151a",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('You have 1 attempts to enter valid TAN');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"wrong\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "7. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fe3e10d4-7925-4427-9ad1-5049a13a6da2",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is scaMethodSelected\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										},
										{
											"name": "8. Update PSU data for payment initiation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d682bb3-17be-4885-8ea9-06f708ba1a98",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('Your SCA authorization is FAILED please create a new one.');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"wrong\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "9. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9f5cdbee-3ecf-4283-9cf3-22a5c6c2fd0e",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is failed\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('failed');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										}
									],
									"description": "Manual TAN copying required",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d2c9a9fa-a93e-4e1d-980d-f4841e34072b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3b2bb4f2-9e86-49c7-8d37-97ab9c9d11d5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "wrong password then correct one",
									"item": [
										{
											"name": "1. Enable signing basket support in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7edc517c-230a-4a08-a507-5afad0960956",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n        \n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8274b581-fdf4-4dc9-819c-2251069525ec",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Payment initiation request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "69a5c9c8-43f3-4c8a-a870-f1b651d32698",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Transcation status is RCVD\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('self');",
															"    pm.expect(_links).to.have.property('status');",
															"    pm.expect(_links).to.have.property('startAuthorisation');",
															"});",
															"",
															"pm.test(\"Payment ID exists\", () => {",
															"    pm.expect(jsonData).to.have.property('paymentId');",
															"});",
															"",
															"pm.globals.set(\"payment_id\", jsonData.paymentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "023368cf-bf63-40bc-862a-cae508b60e15",
														"exec": [
															"pm.globals.unset(\"payment_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}"
													]
												},
												"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "70d001f4-a1b5-4e2b-a237-66a7316d35cb",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e569f530-9b1d-4007-832d-ca4e1142e292",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "5. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8c3f8a99-024b-4f6b-beaa-452450793c81",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('You have 2 attempts to enter valid credentials');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "6. Update PSU data for payment initiation with correct pass",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6e3f2ce7-c5c1-4a08-8a1d-a3d4b6dfa1ac",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('SCA status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "8. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab93f3ff-1a45-46c2-8c5e-44fe5559bb62",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										}
									],
									"description": "Manual TAN copying required",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff4732df-f726-411e-aaec-ddf1c5953831",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f5365592-2bb2-41c6-afcf-30ff79ddeef3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "wrong TAN then correct one",
									"item": [
										{
											"name": "1. Enable signing basket support in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2b08d2e4-63fd-4a49-8580-b0a515da63bd",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n        \n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eb88d3cb-7d41-4393-93d0-9ebde6923ac6",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Payment initiation request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "57a77011-f9e8-481b-aeb4-60bc12776242",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Transcation status is RCVD\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('self');",
															"    pm.expect(_links).to.have.property('status');",
															"    pm.expect(_links).to.have.property('startAuthorisation');",
															"});",
															"",
															"pm.test(\"Payment ID exists\", () => {",
															"    pm.expect(jsonData).to.have.property('paymentId');",
															"});",
															"",
															"pm.globals.set(\"payment_id\", jsonData.paymentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7827ace0-4fe8-420e-ace6-a63c31e4c39b",
														"exec": [
															"pm.globals.unset(\"payment_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}"
													]
												},
												"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "773923c4-f493-4e2b-9d1c-1cb4726becb0",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "40f75945-0721-423f-af83-046803de0dce",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "5. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92e67f56-1cda-4913-8dc2-ee26881a2bbd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('SCA status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "6. Update PSU data for payment initiation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "139c8509-2787-4a43-b990-d11f793923e0",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('You have 2 attempts to enter valid TAN');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"wrong\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "7. Update PSU data for payment initiation finalized with correct tan",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c8c1b5d5-a152-49f5-800b-ccdb583295cb",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is finalised', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});",
															"",
															"pm.test(\"Select scaStatus link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "8. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d19b1add-a5c1-4d5d-a0da-e7744902db33",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										}
									],
									"description": "Manual TAN copying required",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "098f4b48-9bc0-4399-bd32-25697fac978e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4e9bbc2e-6cfa-4e5b-b81d-4b855612bf5d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payment Cancellation",
							"item": [
								{
									"name": "wrong PSU-ID",
									"item": [
										{
											"name": "1. Enable signing basket support and mandate cancellation authorisation in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e3789397-7338-45a0-9d69-faf89322e8ae",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": true,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\"\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "17302c4e-2abc-429f-a209-7095c7908cfa",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Payment initiation request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "94034987-46df-427c-8a2c-18745e362143",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Transcation status is RCVD\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"",
															"    pm.expect(_links).to.have.property('self');",
															"    pm.expect(_links).to.have.property('status');",
															"    pm.expect(_links).to.have.property('startAuthorisation');",
															"    ",
															"});",
															"",
															"pm.test(\"Payment ID exists\", () => {",
															"    pm.expect(jsonData).to.have.property('paymentId');",
															"});",
															"",
															"pm.globals.set(\"payment_id\", jsonData.paymentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ebe0d9d1-ad88-49c6-b4c1-4a904a31c53d",
														"exec": [
															"pm.globals.unset(\"payment_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}"
													]
												},
												"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3b3e4680-68ff-475d-8fa9-b7a55d0d87ad",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ba526a0f-6d42-4cd4-8e7c-c9c2dbdc5738",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "5. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4d38a69e-0521-4042-b0c6-643831f2ca84",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is psuAuthenticated', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
															"});",
															"",
															"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
															"});",
															"",
															"pm.test(\"scaMethods exist\", () => {",
															"    pm.expect(jsonData).to.have.property('scaMethods');",
															"    const scaMethods = jsonData.scaMethods;",
															"    ",
															"    pm.expect(scaMethods.length).to.be.above(1);",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"    ",
															"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "6. Update PSU data for payment initiation chose SCA method",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5a7937d5-e59d-4298-a34f-1510a8e0450c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Select authoriseTransaction method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															"",
															"pm.test(\"Select chosenScaMethod exist\", () => {",
															"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
															"    const chosenScaMethod = jsonData.chosenScaMethod;",
															"    ",
															"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
															"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
															"    ",
															"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
															"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
															"});",
															"",
															"pm.test(\"Challenge data exist\", () => {",
															"    pm.expect(jsonData).to.have.property('challengeData');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "7. Update PSU data for payment initiation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "423570ab-a8b2-441e-9165-6ae185d975ce",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is finalised', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "8.. Cancel payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "66b2fffd-6e7e-4d11-9b17-204a4ba12df4",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Transcation status is ACSP\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "9. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "784c8208-ef7a-496c-b176-c5884bcf5941",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "579f51b8-124d-43dc-81eb-0d00925759c0",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.test(\"Select authorisationId \", () => {",
															"    pm.expect(jsonData).to.have.property('authorisationId');",
															"    ",
															"    pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "10. Update PSU data for payment cancellation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e7135f0-5520-4daf-ad50-cd3e8c7653c0",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('The PSU-ID cannot be matched by the addressed ASPSP or is blocked, or a password resp. OTP was not correct');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "11. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f1b691f5-fcff-4e55-97ff-4906d52b3999",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is failed\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('failed');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1b3bd3a1-41ff-43e7-abcf-942d9afdb9df",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ffd78db6-713d-4783-854c-814e4ccb85d5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "wrong Password",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "87b0ac98-0312-4f65-8cdf-d3b2c1152345",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Payment initiation request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f4269bd-279b-495e-abe9-011db2a48d7d",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Transcation status is RCVD\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"",
															"    pm.expect(_links).to.have.property('self');",
															"    pm.expect(_links).to.have.property('status');",
															"    pm.expect(_links).to.have.property('startAuthorisation');",
															"    ",
															"});",
															"",
															"pm.test(\"Payment ID exists\", () => {",
															"    pm.expect(jsonData).to.have.property('paymentId');",
															"});",
															"",
															"pm.globals.set(\"payment_id\", jsonData.paymentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5cdfba08-6588-4fb2-877c-fb2fc24d243f",
														"exec": [
															"pm.globals.unset(\"payment_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}"
													]
												},
												"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
											},
											"response": []
										},
										{
											"name": "3. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c11d79ae-82f6-450d-b1b2-4b2591dc0b35",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "958b9d57-911a-4ddf-b05d-8f20bb97d8a5",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "4. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "41cccfcb-11ef-48dd-8c03-22cf4be7ed74",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is psuAuthenticated', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
															"});",
															"",
															"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
															"});",
															"",
															"pm.test(\"scaMethods exist\", () => {",
															"    pm.expect(jsonData).to.have.property('scaMethods');",
															"    const scaMethods = jsonData.scaMethods;",
															"    ",
															"    pm.expect(scaMethods.length).to.be.above(1);",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"    ",
															"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "5. Update PSU data for payment initiation chose SCA method",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "046525f7-6996-43b2-a2bc-c8f21905620b",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Select authoriseTransaction method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															"",
															"pm.test(\"Select chosenScaMethod exist\", () => {",
															"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
															"    const chosenScaMethod = jsonData.chosenScaMethod;",
															"    ",
															"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
															"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
															"    ",
															"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
															"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
															"});",
															"",
															"pm.test(\"Challenge data exist\", () => {",
															"    pm.expect(jsonData).to.have.property('challengeData');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "6. Update PSU data for payment initiation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "24811237-105d-491b-8be2-79e951d3378f",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is finalised', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "7. Cancel payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c5bbc232-f36a-444f-a323-c4ef876397d6",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Transcation status is ACSP\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "8. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e77bcdd8-bc22-4f55-ad18-5c70194295a3",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "49d0e5bd-2600-4f47-8fc2-5cb4991a9ef0",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.test(\"Select authorisationId \", () => {",
															"    pm.expect(jsonData).to.have.property('authorisationId');",
															"    ",
															"    pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "9. Update PSU data for payment cancellation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1440c218-790b-4ce3-a004-39a6b9b381e2",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('You have 2 attempts to enter valid credentials');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "10. Update PSU data for payment cancellation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9909af43-a739-490d-8158-93c84d77f3aa",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('You have 1 attempts to enter valid credentials');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "10. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1e58344a-399c-448c-b86f-719b27fb15d4",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is psuIdentified\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('psuIdentified');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										},
										{
											"name": "11. Update PSU data for payment cancellation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e36c9304-f5a4-404d-a27b-3d76363b1387",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('The PSU-ID cannot be matched by the addressed ASPSP or is blocked, or a password resp. OTP was not correct');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "12. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "501b0c6f-c996-4146-806e-dc7fb90d2f00",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is failed\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('failed');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fff92d8c-dfdc-47fc-9f0e-e2993a437062",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "807a507e-1b6c-4f13-b068-27186d9a2332",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "wrong AuthenticationMethod",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "67f5df40-71bb-4a10-b88c-63c25fdef7b9",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Payment initiation request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a50e09ef-03c5-4b00-a401-438adbf1c29a",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Transcation status is RCVD\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"",
															"    pm.expect(_links).to.have.property('self');",
															"    pm.expect(_links).to.have.property('status');",
															"    pm.expect(_links).to.have.property('startAuthorisation');",
															"    ",
															"});",
															"",
															"pm.test(\"Payment ID exists\", () => {",
															"    pm.expect(jsonData).to.have.property('paymentId');",
															"});",
															"",
															"pm.globals.set(\"payment_id\", jsonData.paymentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a9449fe7-a395-405c-9848-8e8260c823bd",
														"exec": [
															"pm.globals.unset(\"payment_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}"
													]
												},
												"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
											},
											"response": []
										},
										{
											"name": "3. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b7cbdbff-4933-452e-8dfc-29b417be2725",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "88769f16-735c-4b91-bfff-d5d6e6294bf2",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "4. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bec2aaf8-3a4f-4399-9558-3a747657ab1d",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is psuAuthenticated', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
															"});",
															"",
															"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
															"});",
															"",
															"pm.test(\"scaMethods exist\", () => {",
															"    pm.expect(jsonData).to.have.property('scaMethods');",
															"    const scaMethods = jsonData.scaMethods;",
															"    ",
															"    pm.expect(scaMethods.length).to.be.above(1);",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"    ",
															"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "5. Update PSU data for payment initiation chose SCA method",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e1ddef20-d575-4e4f-9b8c-b4d3d401988c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Select authoriseTransaction method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															"",
															"pm.test(\"Select chosenScaMethod exist\", () => {",
															"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
															"    const chosenScaMethod = jsonData.chosenScaMethod;",
															"    ",
															"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
															"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
															"    ",
															"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
															"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
															"});",
															"",
															"pm.test(\"Challenge data exist\", () => {",
															"    pm.expect(jsonData).to.have.property('challengeData');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "6. Update PSU data for payment initiation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f7000898-bcb6-41f0-a405-bfb8d61b36bb",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is finalised', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "7. Cancel payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7c4f21eb-aa45-4b98-b5a7-eb7081853ca5",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Transcation status is ACSP\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "8. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0b0825f7-f164-41a4-95b7-3ff3b4cfab89",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "66f9c32c-13cf-4ee7-bab5-02c5139ce1f3",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.test(\"Select authorisationId \", () => {",
															"    pm.expect(jsonData).to.have.property('authorisationId');",
															"    ",
															"    pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "9. Update PSU data for payment cancellation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "72ebc9da-2689-4494-9205-0b8eb5732b0f",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is psuAuthenticated', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
															"});",
															"",
															"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
															"});",
															"",
															"pm.test(\"scaMethods exist\", () => {",
															"    pm.expect(jsonData).to.have.property('scaMethods');",
															"    const scaMethods = jsonData.scaMethods;",
															"    ",
															"    pm.expect(scaMethods.length).to.be.above(1);",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"    ",
															"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "10. Update PSU data for payment cancellation chose SCA method",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "82c9adf8-5392-4452-bda1-30cb35895b33",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('The PSU-ID cannot be matched by the addressed ASPSP or is blocked, or a password resp. OTP was not correct');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"authenticationMethodId\": \"wrong\"        \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "11. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "57f92ac4-9e5a-4e1b-8f3e-0cadd625b190",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is failed\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('failed');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1ecbd130-5d6e-44ec-a095-938ebab17fa4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b2f00d56-9680-450a-83fe-64d26a45df97",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "wrong TAN",
									"item": [
										{
											"name": "1. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a43bd47f-1bd5-46f7-93f4-a54408044c1b",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Payment initiation request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "107868cc-bf14-42b8-88ae-82ea589cd76e",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Transcation status is RCVD\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"",
															"    pm.expect(_links).to.have.property('self');",
															"    pm.expect(_links).to.have.property('status');",
															"    pm.expect(_links).to.have.property('startAuthorisation');",
															"    ",
															"});",
															"",
															"pm.test(\"Payment ID exists\", () => {",
															"    pm.expect(jsonData).to.have.property('paymentId');",
															"});",
															"",
															"pm.globals.set(\"payment_id\", jsonData.paymentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "82374e06-417c-4480-b2b4-86d95858dc58",
														"exec": [
															"pm.globals.unset(\"payment_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}"
													]
												},
												"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
											},
											"response": []
										},
										{
											"name": "3. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "08b839af-a03c-4cb6-aced-57cee087751c",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6ce2d7dc-e1a0-4dad-939a-34cdd236dff5",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "4. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "64ee2dc0-ee17-4502-a0e3-a2e45df9b03d",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is psuAuthenticated', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
															"});",
															"",
															"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
															"});",
															"",
															"pm.test(\"scaMethods exist\", () => {",
															"    pm.expect(jsonData).to.have.property('scaMethods');",
															"    const scaMethods = jsonData.scaMethods;",
															"    ",
															"    pm.expect(scaMethods.length).to.be.above(1);",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"    ",
															"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "5. Update PSU data for payment initiation chose SCA method",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "334fb7eb-d42e-48c4-ba02-9f2aa33330ff",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Select authoriseTransaction method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															"",
															"pm.test(\"Select chosenScaMethod exist\", () => {",
															"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
															"    const chosenScaMethod = jsonData.chosenScaMethod;",
															"    ",
															"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
															"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
															"    ",
															"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
															"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
															"});",
															"",
															"pm.test(\"Challenge data exist\", () => {",
															"    pm.expect(jsonData).to.have.property('challengeData');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "6. Update PSU data for payment initiation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "959360fc-e769-4efa-8bd1-825e5c9b7cd9",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is finalised', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "7. Cancel payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "180a94a3-1189-48f6-a44a-dfb89bc0be5f",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Transcation status is ACSP\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "8. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "eb930ce3-9fbc-44f0-90c1-f8c41ebc3c1d",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5c489d11-ce74-4c83-bb83-08d722cdbeab",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.test(\"Select authorisationId \", () => {",
															"    pm.expect(jsonData).to.have.property('authorisationId');",
															"    ",
															"    pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "9. Update PSU data for payment cancellation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0c92b622-2c7c-4930-b0fe-f2fe46ef70a0",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is psuAuthenticated', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
															"});",
															"",
															"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
															"});",
															"",
															"pm.test(\"scaMethods exist\", () => {",
															"    pm.expect(jsonData).to.have.property('scaMethods');",
															"    const scaMethods = jsonData.scaMethods;",
															"    ",
															"    pm.expect(scaMethods.length).to.be.above(1);",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
															"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
															"    ",
															"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
															"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
															"    ",
															"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "10. Update PSU data for payment cancellation chose SCA method",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b5a071c5-1524-4af9-b84a-a9716a58a732",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Select authoriseTransaction method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															"",
															"pm.test(\"Select chosenScaMethod exist\", () => {",
															"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
															"    const chosenScaMethod = jsonData.chosenScaMethod;",
															"    ",
															"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
															"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
															"    ",
															"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
															"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
															"});",
															"",
															"pm.test(\"Challenge data exist\", () => {",
															"    pm.expect(jsonData).to.have.property('challengeData');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "11. Update PSU data for payment cancellation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "922bf95c-1dd6-488a-bc5d-195e06b8868b",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('You have 2 attempts to enter valid TAN');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"wrong\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "12. Update PSU data for payment cancellation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2e4492b6-841e-423f-b457-42c47b187a89",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('You have 1 attempts to enter valid TAN');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"wrong\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "13. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "658b4bf5-b2db-4071-8660-1acf0b0fba30",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is scaMethodSelected\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										},
										{
											"name": "14. Update PSU data for payment cancellation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "36c3c5f1-daed-49d5-8c17-7879e21a6d6c",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('The PSU-ID cannot be matched by the addressed ASPSP or is blocked, or a password resp. OTP was not correct');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_multiple}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"wrong\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "15. Read the SCA Status of the payment authorisation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e2350e50-b764-4dc4-99a5-c2f7e65f3b3f",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is failed\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('failed');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "98996636-0c5b-406c-999f-636c18868152",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "900bfd85-2af8-4130-87bd-5bb075efe046",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "wrong password then correct one",
									"item": [
										{
											"name": "1. Enable signing basket support and mandate cancellation authorisation in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a9702a48-ace9-48a7-b682-cd402b44205d",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": true,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3f8fd291-c82e-4c32-9221-2be6e92d0417",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Payment initiation request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ca404447-6b8b-4b1e-ab75-f9007910305f",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Transcation status is RCVD\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('startAuthorisation');",
															"    ",
															"});",
															"",
															"pm.test(\"Payment ID exists\", () => {",
															"    pm.expect(jsonData).to.have.property('paymentId');",
															"});",
															"",
															"pm.globals.set(\"payment_id\", jsonData.paymentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1134b891-5ec7-4a08-b694-b66fddf28a65",
														"exec": [
															"pm.globals.unset(\"payment_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}"
													]
												},
												"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bc6499a0-1ae0-4067-8160-5b95eeeb87a6",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f7b8f6ce-d6ef-44ee-aff2-a5a142385a2d",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "5. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "69b2f9a1-9dfc-49b5-90d5-c942f4d9dc09",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Select authoriseTransaction method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "6. Update PSU data for payment initiation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3ef0be54-2316-4211-995a-340a975e2a01",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is finalised', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});",
															"",
															"pm.test(\"Select scaStatus link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "7. Cancel payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5cce22f5-3802-4e39-985f-b0524e0c35d0",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Transcation status is ACSP\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('self');",
															"    pm.expect(_links).to.have.property('status');",
															"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "8. Start the cancellation authorisation process",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e3512190-a82f-495a-9bfd-4df5fb3e272b",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('received');",
															"});",
															"",
															"pm.test(\"Select authorisationId \", () => {",
															"    pm.expect(jsonData).to.have.property('authorisationId');",
															"    ",
															"    pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('received');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    //pm.expect(_links).to.have.property('scaStatus');  ",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "857eb474-a12e-4090-a8e8-8e440b558044",
														"exec": [
															"pm.globals.unset(\"cancellation_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "PSU-IP-Address",
														"type": "text",
														"value": "{{ip_address}}"
													},
													{
														"key": "X-Request-ID",
														"type": "text",
														"value": "{{x_request_id}}"
													},
													{
														"key": "TPP-Redirect-Preferred",
														"type": "text",
														"value": "true",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "9. Update PSU data for payment cancellation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "540b6a0a-0959-45c9-9cd0-5fbcb269d318",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('You have 2 attempts to enter valid credentials');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"wrong\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "10. Update PSU data for payment cancellation with correct pass",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e5dad457-09d5-4b74-934d-c68b86e27b8b",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Select authoriseTransaction method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "11. Read the SCA Status",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2dd836f8-0f0b-4b46-bceb-81ca6f16965a",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is scaMethodSelected\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cebc8abb-06ab-41e0-b76f-f924ba86ad11",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "aa6f250a-c491-461d-a3c5-936983a6dffb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "wrong TAN then correct one",
									"item": [
										{
											"name": "1. Enable signing basket support and mandate cancellation authorisation in ASPSP profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "49928415-7185-46d8-ab2f-7ad4895f9931",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n                \"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": true,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\",\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"aspsp-settings"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Set embedded SCA approach",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4e6a0ce9-5517-42da-8a4b-a86219d19445",
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
												},
												"url": {
													"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_aspsp_profile}}"
													],
													"path": [
														"api",
														"v1",
														"aspsp-profile",
														"for-debug",
														"sca-approaches"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Payment initiation request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "964b1852-f4ca-42c3-830b-328029496248",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Transcation status is RCVD\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('startAuthorisation');",
															"    ",
															"});",
															"",
															"pm.test(\"Payment ID exists\", () => {",
															"    pm.expect(jsonData).to.have.property('paymentId');",
															"});",
															"",
															"pm.globals.set(\"payment_id\", jsonData.paymentId);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0a44b12a-e5c6-42a7-a5de-94266405adb7",
														"exec": [
															"pm.globals.unset(\"payment_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_single}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}"
													]
												},
												"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
											},
											"response": []
										},
										{
											"name": "4. Start the authorisation process for a payment initiation",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0cf70e03-67ec-47b7-a0fd-a09716a42668",
														"exec": [
															"pm.globals.unset(\"authorisation_id\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1734aa25-05de-4c0d-8eaf-88cbf1eecf60",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
															"",
															"pm.globals.set(\"authorisation_id\", authorisationId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('psuIdentified');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "5. Update PSU data for payment initiation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b937601-c56d-413b-9350-8abba559082d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Select authoriseTransaction method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "6. Update PSU data for payment initiation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d219bed-919c-40b6-9e2a-84416d54a5d7",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is finalised', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});",
															"",
															"pm.test(\"Select scaStatus link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "7. Cancel payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f1e718b5-cb13-4e01-8929-bd503ad1d282",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Transcation status is ACSP\", () => {",
															"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('self');",
															"    pm.expect(_links).to.have.property('status');",
															"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "PSU-IP-Address",
														"value": "{{ip_address}}",
														"type": "text"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}",
														"type": "text"
													},
													{
														"key": "TPP-Explicit-Authorisation-Preferred",
														"value": "true",
														"type": "text"
													},
													{
														"key": "TPP-Redirect-URI",
														"value": "TPP-Redirect-URI",
														"type": "text"
													},
													{
														"key": "TPP-Nok-Redirect-URI",
														"value": "TPP-Nok-Redirect-URI",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "8. Start the cancellation authorisation process",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "29d4950f-200d-4295-8481-a3f6cdfd2a64",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('received');",
															"});",
															"",
															"pm.test(\"Select authorisationId \", () => {",
															"    pm.expect(jsonData).to.have.property('authorisationId');",
															"    ",
															"    pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
															"});",
															"",
															"pm.test(\"Select scaStatus \", () => {",
															"    pm.expect(jsonData).to.have.property('scaStatus');",
															"    const scaStatus = jsonData.scaStatus;",
															"    pm.expect(scaStatus).to.eql('received');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    //pm.expect(_links).to.have.property('scaStatus');  ",
															"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
															"    ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f27229cc-fb12-48f8-86a7-6f04900136e7",
														"exec": [
															"pm.globals.unset(\"cancellation_id\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "PSU-IP-Address",
														"type": "text",
														"value": "{{ip_address}}"
													},
													{
														"key": "X-Request-ID",
														"type": "text",
														"value": "{{x_request_id}}"
													},
													{
														"key": "TPP-Redirect-Preferred",
														"type": "text",
														"value": "true",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations"
													]
												},
												"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
											},
											"response": []
										},
										{
											"name": "9. Update PSU data for payment cancellation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "17c681b5-a6df-400c-a141-408dd630a54d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is scaMethodSelected', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
															"});",
															"",
															"pm.test(\"Select authoriseTransaction method link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															"",
															"pm.test(\"Links exist\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    ",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"    pm.expect(_links).to.have.property('authoriseTransaction');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "10. Update PSU data for payment cancellation finalized",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "98621186-018f-4878-a704-7f64117c8503",
														"exec": [
															"pm.test('Status code is 401', () => {",
															"   pm.response.to.have.status(401);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is PSU_CREDENTIALS_INVALID\", () => {",
															"    const error = jsonData.tppMessages[0];",
															"    ",
															"    pm.expect(error).to.have.property('category');",
															"    pm.expect(error).to.have.property('code');",
															"    pm.expect(error).to.have.property('text');",
															"       ",
															"    pm.expect(error.category).to.eql('ERROR');",
															"    pm.expect(error.code).to.eql('PSU_CREDENTIALS_INVALID');",
															"    pm.expect(error.text).to.eql('You have 2 attempts to enter valid TAN');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"wrong\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "11. Update PSU data for payment cancellation finalized with correct tan",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "56546e28-9f0b-4c51-ae54-af3395c2a564",
														"exec": [
															"pm.test('Status code is 200', () => {",
															"   pm.response.to.have.status(200);",
															"});",
															"",
															"const jsonData = pm.response.json();",
															"",
															"pm.test('Sca status is finalised', () => {",
															"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"});",
															"",
															"pm.test(\"Select scaStatus link exists\", () => {",
															"    pm.expect(jsonData).to.have.property('_links');",
															"    const _links = jsonData._links;",
															"    pm.expect(_links).to.have.property('scaStatus');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "PSU-ID",
														"value": "{{psu_id_single}}"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
											},
											"response": []
										},
										{
											"name": "12. Read the SCA Status",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "57dc9c7c-c2d1-4f89-bd9d-7f959ba5fadb",
														"exec": [
															"const jsonData = pm.response.json();",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Sca status is finalised\", function(){",
															"    pm.expect(jsonData.scaStatus).to.eql('finalised');",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-Request-ID",
														"value": "{{x_request_id}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url_xs2a}}"
													],
													"path": [
														"v1",
														"{{payment_service}}",
														"{{payment_product}}",
														"{{payment_id}}",
														"cancellation-authorisations",
														"{{authorisation_id}}"
													]
												},
												"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a1f43241-8bfc-4078-809d-2b1a68cd9220",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5ff97c21-2017-44a1-b2c5-035dd5ea468f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payment type and product validation fail",
					"item": [
						{
							"name": "Single payment initiation EMBEDDED explicit multiple SCA methods fail start authorisation",
							"item": [
								{
									"name": "1. Enable signing basket support in ASPSP profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b495b2d-d3b5-493e-b62a-880d6bda8cdc",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\"\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9717278c-0762-49a7-be87-cb72de865d50",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16d5ca16-57ad-4eb8-9703-2d7962d1f617",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('startAuthorisation');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4fe5424a-2ed0-476c-9c6c-31643f5ab063",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation with wrong payment product",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "de9f02a4-afbd-446b-baf7-946059eec011",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "13a00f84-3254-47a0-a1a3-146ec4b356f9",
												"exec": [
													"pm.test('Status code is 404', () => {",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error code is PRODUCT_UNKNOWN\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PRODUCT_UNKNOWN');",
													"    pm.expect(error.text).to.eql('Wrong payment product: notAProduct');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/notAProduct/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"notAProduct",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation with wrong payment service",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2c3c6bfb-5ee5-4e0d-b476-f56d4eb62cf3",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c44ffe5b-9524-45ed-8695-dd3a9f381160",
												"exec": [
													"pm.test('Status code is 400', () => {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error code is PARAMETER_NOT_SUPPORTED\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PARAMETER_NOT_SUPPORTED');",
													"    pm.expect(error.text).to.eql('Wrong payment type: bulk-payments');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f76f51db-8453-4b02-9c6a-62e4f833f1e2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8ff5f4e-ee99-4943-8d3b-8fd81afd9c41",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment initiation EMBEDDED explicit multiple SCA methods fail update PSU data",
							"item": [
								{
									"name": "1. Enable signing basket support in ASPSP profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64a8a2b2-4281-4656-bee1-a97c5b4c7121",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\"\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bf63f8c-dd51-4c9e-b70d-b2f49715f07f",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5637bba3-986d-4339-a281-6bcc9653581b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('startAuthorisation');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "92bcefd6-4cdb-407c-a86f-d1c6eff8f170",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fcd84ab5-ab00-4118-b3bb-8776c1f1e4e7",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1186db55-9e2e-469f-a139-41e549873d86",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation with wrong payment product",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d84fc67b-d647-41d7-a02b-915cc32d03c6",
												"exec": [
													"pm.test('Status code is 404', () => {",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error code is PRODUCT_UNKNOWN\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PRODUCT_UNKNOWN');",
													"    pm.expect(error.text).to.eql('Wrong payment product: notAProduct');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/notAProduct/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"notAProduct",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation with wrong payment service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b968fe8-da7b-42e0-8ce7-192d671f5398",
												"exec": [
													"pm.test('Status code is 400', () => {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error code is PARAMETER_NOT_SUPPORTED\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PARAMETER_NOT_SUPPORTED');",
													"    pm.expect(error.text).to.eql('Wrong payment type: bulk-payments');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "578f2bd3-0de7-4273-ac64-4b4ed6073db6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c14ed23f-a636-4229-ae38-f658519c62e6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment initiation EMBEDDED explicit multiple SCA methods fail get requests",
							"item": [
								{
									"name": "1. Enable signing basket support in ASPSP profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cae0d25-4616-40eb-9d0e-2c1417e4c9c0",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\"\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23a1c6a6-82e1-402b-b52c-473729a6abee",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "617607a0-0293-43b8-a67f-b4e97c34fe16",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('startAuthorisation');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b90c6b63-1370-4b43-ace3-9e50dffc1d88",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b9c52907-9e9e-45b6-90aa-7ee9adecc7e1",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "21a5bd0b-2d64-44eb-9c4f-25cd7ac2581d",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "047fe942-e903-4ca9-a067-523d520c01fb",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.be.above(1);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"    ",
													"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6. Update PSU data for payment initiation chose SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb6f9f24-24de-4f86-9ae5-625da979bba9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "7. Update PSU data for payment initiation finalized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "085d80d5-4321-4072-81d8-a0d750e18b7c",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "8. Get Payment Initiation Authorisation Sub-Resources Request with incorrect payment product",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5ea35be-38f9-4085-9aec-dd1a4ced5783",
												"exec": [
													"pm.test('Status code is 404', () => {",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error code is v\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PRODUCT_UNKNOWN');",
													"    pm.expect(error.text).to.eql('Wrong payment product: notAProduct');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/notAProduct/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"notAProduct",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
									},
									"response": []
								},
								{
									"name": "8. Get Payment Initiation Authorisation Sub-Resources Request with incorrect payment service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a43d516-d299-48e0-bf71-5ff62e7620a1",
												"exec": [
													"pm.test('Status code is 400', () => {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error code is PARAMETER_NOT_SUPPORTED\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PARAMETER_NOT_SUPPORTED');",
													"    pm.expect(error.text).to.eql('Wrong payment type: bulk-payments');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Read a list of all authorisation subresources IDs which have been created.  This function returns an array of hyperlinks to all generated authorisation sub-resources. "
									},
									"response": []
								},
								{
									"name": "9. Read the SCA Status of the payment authorisation with wrong payment product",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "721cfccb-2397-4f4c-8125-2d9676139969",
												"exec": [
													"pm.test('Status code is 404', () => {",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error code is v\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PRODUCT_UNKNOWN');",
													"    pm.expect(error.text).to.eql('Wrong payment product: notAProduct');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/notAProduct/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"notAProduct",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
									},
									"response": []
								},
								{
									"name": "9. Read the SCA Status of the payment authorisation with wrong payment service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "647c03fa-bede-4f65-875e-fcdf11fdb498",
												"exec": [
													"pm.test('Status code is 400', () => {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error code is PARAMETER_NOT_SUPPORTED\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PARAMETER_NOT_SUPPORTED');",
													"    pm.expect(error.text).to.eql('Wrong payment type: bulk-payments');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This method returns the SCA status of a payment initiation's authorisation sub-resource. "
									},
									"response": []
								},
								{
									"name": "10. Get Payment Information with wrong payment product",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7254aa26-7246-4b11-8bb5-590e979aa399",
												"exec": [
													"pm.test('Status code is 404', () => {",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error code is PRODUCT_UNKNOWN\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PRODUCT_UNKNOWN');",
													"    pm.expect(error.text).to.eql('Wrong payment product: notAProduct');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml, multipart/form-data"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/notAProduct/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"notAProduct",
												"{{payment_id}}"
											]
										},
										"description": "Returns the content of a payment object"
									},
									"response": []
								},
								{
									"name": "10. Get Payment Information with wrong payment service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f67631ea-b1a4-4f28-96c3-21ac160db73a",
												"exec": [
													"pm.test('Status code is 400', () => {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error code is PARAMETER_NOT_SUPPORTED\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PARAMETER_NOT_SUPPORTED');",
													"    pm.expect(error.text).to.eql('Wrong payment type: bulk-payments');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml, multipart/form-data"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										},
										"description": "Returns the content of a payment object"
									},
									"response": []
								},
								{
									"name": "11. Payment initiation status request with wrong payment product",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d6e298d-1c96-40be-868f-eaf474e2d418",
												"exec": [
													"pm.test('Status code is 404', () => {",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error code is PRODUCT_UNKNOWN\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PRODUCT_UNKNOWN');",
													"    pm.expect(error.text).to.eql('Wrong payment product: notAProduct');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/notAProduct/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"notAProduct",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								},
								{
									"name": "11. Payment initiation status request with wrong payment service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21c5ef6a-a440-43f0-aac9-e1720ba36f74",
												"exec": [
													"pm.test('Status code is 400', () => {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error code is PARAMETER_NOT_SUPPORTED\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PARAMETER_NOT_SUPPORTED');",
													"    pm.expect(error.text).to.eql('Wrong payment type: bulk-payments');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								}
							],
							"description": "Manual TAN copying required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da0a55b9-6810-4717-a8c6-7139a9e68540",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6b173470-5c9c-44b8-a1ca-3aa220ab92c3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment cancellation EMBEDDED explicit multiple SCA methods fail start authorisation request",
							"item": [
								{
									"name": "1. Enable signing basket support in ASPSP profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "802a6ea1-cfaa-4205-b62a-d028130f8698",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\"\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6556fd3-4429-4358-ae8c-3cc0ac5f5c0e",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f010ad0-de8c-4ed5-a6e0-8e97d090a65d",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('startAuthorisation');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bb1021d1-2b09-4d84-8da2-4fb6be89529f",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c1211ac6-b0ba-4f6b-af36-2ca1bd4e1aac",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d0f8582d-ed6d-44d3-8c66-aa10a698d223",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9529a67b-b174-4510-9dc1-a6a9ef7ca24e",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.be.above(1);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"    ",
													"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6. Update PSU data for payment initiation chose SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8c8a904-2069-4e40-bac1-139995f220b1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "7. Update PSU data for payment initiation finalized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d85d4388-cb77-46c7-af2c-bece5393720a",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "8.. Cancel payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcb8cfc6-859f-4ffb-80f4-0990eb147920",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transcation status is ACSP\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Start the authorisation process for a payment initiation with incorrect payment product",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ff5f2949-2f94-46a9-99fd-8409d24895f9",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "236cba28-d932-4e62-9979-38714e1cd627",
												"exec": [
													"pm.test('Status code is 404', () => {",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error code is v\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PRODUCT_UNKNOWN');",
													"    pm.expect(error.text).to.eql('Wrong payment product: notAProduct');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/notAProduct/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"notAProduct",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "9. Start the authorisation process for a payment initiation with incorrect payment service",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ce8dad4d-acfb-480b-a057-a45d22b902f7",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bdc108ed-b106-4d6d-aca4-5c43095b085f",
												"exec": [
													"pm.test('Status code is 400', () => {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error code is PARAMETER_NOT_SUPPORTED\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PARAMETER_NOT_SUPPORTED');",
													"    pm.expect(error.text).to.eql('Wrong payment type: bulk-payments');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "864f16de-272a-4a19-8587-02ce4fdb4ffa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b2542b79-49dd-468b-8d58-e6774e5a27e2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment cancellation EMBEDDED explicit multiple SCA methods fail update PSU data request",
							"item": [
								{
									"name": "1. Enable signing basket support in ASPSP profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0d5a049-3f1c-4331-a0c0-2eb4551b921d",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\"\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c650b17f-e718-4278-9a46-b97da954c1da",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84549977-ad18-4d86-8635-50bc50558b10",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('startAuthorisation');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cc31e37f-f7b1-4a4f-b0ce-4c3ac0a4bdfa",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d063bad2-30b6-4633-a3d7-97d360b373b0",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c848422f-fe97-4fd1-afa6-e860723c0092",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe3ef441-db72-4c43-9ddc-ffebab4e734f",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.be.above(1);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"    ",
													"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6. Update PSU data for payment initiation chose SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d1fbbd0-fd72-4794-864d-5c4049c48a68",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "7. Update PSU data for payment initiation finalized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73d531d5-d382-4a43-b9bf-0afb2a20993d",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "8.. Cancel payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e8fcd50-b955-4081-b99e-350a62787b86",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transcation status is ACSP\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f5d90d43-d3d7-40a0-b81d-d4c7c93eee96",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "91649be7-4fea-466a-87e7-4fcd086e5f38",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Select authorisationId \", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    ",
													"    pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
													"});",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "10. Update PSU data for payment cancellation with wrong payment product",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1be38f11-5b17-4c7c-a891-0bc35240a647",
												"exec": [
													"pm.test('Status code is 404', () => {",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error code is v\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PRODUCT_UNKNOWN');",
													"    pm.expect(error.text).to.eql('Wrong payment product: notAProduct');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/notAProduct/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"notAProduct",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "10. Update PSU data for payment cancellation with wrong payment service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5005ebcf-81d3-4b19-8028-c7d3bdbe7c35",
												"exec": [
													"pm.test('Status code is 400', () => {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error code is PARAMETER_NOT_SUPPORTED\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PARAMETER_NOT_SUPPORTED');",
													"    pm.expect(error.text).to.eql('Wrong payment type: bulk-payments');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc2fd975-e575-48c9-bb3c-a94425ab1655",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cf3581e3-72d4-45ef-89da-a7c19c2e93e4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Single payment cancellation EMBEDDED explicit multiple SCA methods fail get request",
							"item": [
								{
									"name": "1. Enable signing basket support in ASPSP profile",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c0c31f5-0064-49a3-acf9-da9693553ead",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ais\": {\n        \"consentTypes\": {\n            \"bankOfferedConsentSupported\": false,\n            \"globalConsentSupported\": false,\n            \"availableAccountsConsentSupported\": true,\n            \"accountAccessFrequencyPerDay\": 4,\n            \"notConfirmedConsentExpirationTimeMs\": 86400000,\n            \"maxConsentValidityDays\": 0\n        },\n        \"redirectLinkToOnlineBanking\": {\n            \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n        },\n        \"transactionParameters\": {\n            \"availableBookingStatuses\": [\n                \"BOOKED\",\n                \"PENDING\"\n            ],\n            \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n        },\n        \"deltaReportSettings\": {\n            \"entryReferenceFromSupported\": false,\n            \"deltaListSupported\": false\n        },\n        \"scaRequirementsForOneTimeConsents\": {\n            \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n        }\n    },\n    \"pis\": {\n        \"supportedPaymentTypeAndProductMatrix\": {\n            \"payments\": [\n                \"sepa-credit-transfers\",\n                \"instant-sepa-credit-transfers\"\n            ]\n        },\n        \"maxTransactionValidityDays\": 0,\n        \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n        \"paymentCancellationAuthorisationMandated\": false,\n        \"redirectLinkToOnlineBanking\": {\n            \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n            \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n            \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n        },\n        \"countryValidationSupported\": \"DE\"\n    },\n    \"piis\": {\n        \"piisConsentSupported\": \"NOT_SUPPORTED\"\n    },\n    \"sb\": {\n        \"signingBasketSupported\": true\n    },\n    \"common\": {\n        \"scaRedirectFlow\": \"REDIRECT\",\n        \"startAuthorisationMode\": \"auto\",\n        \"tppSignatureRequired\": false,\n        \"psuInInitialRequestMandated\": false,\n        \"redirectUrlExpirationTimeMs\": 600000,\n        \"authorisationExpirationTimeMs\": 86400000,\n        \"forceXs2aBaseLinksUrl\": false,\n        \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n        \"supportedAccountReferenceFields\": [\n            \"IBAN\"\n        ],\n        \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n        \"aisPisSessionsSupported\": false,\n        \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n        ],\n          \t\"authorisationConfirmationRequestMandated\": false,\n    \t\"authorisationConfirmationCheckByXs2a\": false, \n  \"checkUriComplianceToDomainSupported\": false \n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"aspsp-settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Set embedded SCA approach",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a003b74-03db-4f5a-8f4a-dc61fc8449dc",
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  \"EMBEDDED\",\n  \"REDIRECT\",\n  \"DECOUPLED\"\n]"
										},
										"url": {
											"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_aspsp_profile}}"
											],
											"path": [
												"api",
												"v1",
												"aspsp-profile",
												"for-debug",
												"sca-approaches"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Payment initiation request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d97ce860-dcdb-4d82-9184-88508d6a5d8f",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Transcation status is RCVD\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"",
													"    pm.expect(_links).to.have.property('self');",
													"    pm.expect(_links).to.have.property('status');",
													"    pm.expect(_links).to.have.property('startAuthorisation');",
													"    ",
													"});",
													"",
													"pm.test(\"Payment ID exists\", () => {",
													"    pm.expect(jsonData).to.have.property('paymentId');",
													"});",
													"",
													"pm.globals.set(\"payment_id\", jsonData.paymentId);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3b57d590-5543-4538-8808-938f3ad945f8",
												"exec": [
													"pm.globals.unset(\"payment_id\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"endToEndIdentification\": \"WBG-123456789\",\n    \"debtorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"instructedAmount\": {\n      \"currency\": \"EUR\",\n      \"amount\": \"0.01\"\n    },\n    \"creditorAccount\": {\n      \"currency\": \"EUR\",\n      \"iban\": \"{{iban_multiple}}\"\n    },\n    \"creditorAgent\" : \"AAAADEBBXXX\",\n    \"creditorName\": \"WBG\",\n    \"creditorAddress\": {\n      \"buildingNumber\": \"56\",\n      \"townName\": \"Nürnberg\",\n      \"country\": \"DE\",\n      \"postCode\": \"90543\",\n      \"streetName\": \"WBG Straße\"\n    },\n    \"remittanceInformationUnstructured\": \"Ref. Number WBG-1222\"\n  }"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}"
											]
										},
										"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
									},
									"response": []
								},
								{
									"name": "4. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e31707ae-68cc-433d-9c76-e664cd52cb9f",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e58d164a-72e5-4801-8723-552bf933a906",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.globals.set(\"authorisation_id\", authorisationId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "5. Update PSU data for payment initiation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26645b55-f9de-4539-94b0-37f23195d3e6",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.be.above(1);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"    ",
													"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "6. Update PSU data for payment initiation chose SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60703d98-df4b-4a5f-aaf0-f36fd0a0f27e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "7. Update PSU data for payment initiation finalized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb8b2e52-2cc9-49ed-89ac-38ac5836c2da",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "8.. Cancel payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1c9861e-95bb-4535-ad3d-c3f228742be7",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Transcation status is ACSP\", () => {",
													"    pm.expect(jsonData.transactionStatus).to.eql('ACSP');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "PSU-IP-Address",
												"value": "{{ip_address}}",
												"type": "text"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}",
												"type": "text"
											},
											{
												"key": "TPP-Explicit-Authorisation-Preferred",
												"value": "true",
												"type": "text"
											},
											{
												"key": "TPP-Redirect-URI",
												"value": "TPP-Redirect-URI",
												"type": "text"
											},
											{
												"key": "TPP-Nok-Redirect-URI",
												"value": "TPP-Nok-Redirect-URI",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. Start the authorisation process for a payment initiation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7d3edc4a-a2f4-4b0f-b34f-4c88e64163c0",
												"exec": [
													"pm.globals.unset(\"authorisation_id\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ff2aeb6c-98a9-4f9d-aeb6-4a6aac9fa738",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"const authorisationId = jsonData._links.updatePsuAuthentication.href.split('/').pop();",
													"",
													"pm.test(\"Select authorisationId \", () => {",
													"    pm.expect(jsonData).to.have.property('authorisationId');",
													"    ",
													"    pm.globals.set(\"authorisation_id\", jsonData.authorisationId);",
													"});",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Select scaStatus \", () => {",
													"    pm.expect(jsonData).to.have.property('scaStatus');",
													"    const scaStatus = jsonData.scaStatus;",
													"    pm.expect(scaStatus).to.eql('psuIdentified');",
													"});",
													"",
													"pm.test(\"Links exist\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    ",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"    pm.expect(_links).to.have.property('updatePsuAuthentication');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										},
										"description": "Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
									},
									"response": []
								},
								{
									"name": "10. Update PSU data for payment cancellation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ffad9b1-7d26-401a-9c81-3f5e8b0a930d",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is psuAuthenticated', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('psuAuthenticated');",
													"});",
													"",
													"pm.test(\"SelectAuthenticationMethod method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('selectAuthenticationMethod');",
													"});",
													"",
													"pm.test(\"scaMethods exist\", () => {",
													"    pm.expect(jsonData).to.have.property('scaMethods');",
													"    const scaMethods = jsonData.scaMethods;",
													"    ",
													"    pm.expect(scaMethods.length).to.be.above(1);",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationType');",
													"    pm.expect(scaMethods[0].authenticationType) !== undefined;",
													"    ",
													"    pm.expect(scaMethods[0]).to.have.property('authenticationMethodId');",
													"    pm.expect(scaMethods[0].authenticationMethodId) !== undefined;",
													"    ",
													"    pm.globals.set(\"authenticationMethodId\", scaMethods[0].authenticationMethodId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "11. Update PSU data for payment cancellation chose SCA method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2471cb93-5289-4932-a214-cba285ba3a54",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is scaMethodSelected', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
													"});",
													"",
													"pm.test(\"Select authoriseTransaction method link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('authoriseTransaction');",
													"});",
													"",
													"pm.test(\"Select chosenScaMethod exist\", () => {",
													"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
													"    const chosenScaMethod = jsonData.chosenScaMethod;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationType');",
													"    pm.expect(chosenScaMethod.authenticationType) !== undefined;",
													"    ",
													"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
													"    pm.expect(chosenScaMethod.authenticationMethodId) !== undefined;",
													"});",
													"",
													"pm.test(\"Challenge data exist\", () => {",
													"    pm.expect(jsonData).to.have.property('challengeData');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"authenticationMethodId\": \"{{authenticationMethodId}}\"        \n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "12. Update PSU data for payment cancellation finalized",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8220935f-4ab8-414f-aac1-4de8229f608d",
												"exec": [
													"pm.test('Status code is 200', () => {",
													"   pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test('Sca status is finalised', () => {",
													"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
													"});",
													"",
													"pm.test(\"Select scaStatus link exists\", () => {",
													"    pm.expect(jsonData).to.have.property('_links');",
													"    const _links = jsonData._links;",
													"    pm.expect(_links).to.have.property('scaStatus');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "PSU-ID",
												"value": "{{psu_id_multiple}}"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"scaAuthenticationData\": \"{{tanNumber}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible Update PSU Data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
									},
									"response": []
								},
								{
									"name": "13. Payment initiation status request with wrong payment product",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe03f549-3a97-4f96-86cf-6d7ca1506150",
												"exec": [
													"pm.test('Status code is 404', () => {",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error code is PRODUCT_UNKNOWN\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PRODUCT_UNKNOWN');",
													"    pm.expect(error.text).to.eql('Wrong payment product: notAProduct');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/notAProduct/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"notAProduct",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								},
								{
									"name": "13. Payment initiation status request with wrong payment service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95cdfd75-00e6-4a4d-9fe9-937da464d412",
												"exec": [
													"pm.test('Status code is 400', () => {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error code is PARAMETER_NOT_SUPPORTED\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PARAMETER_NOT_SUPPORTED');",
													"    pm.expect(error.text).to.eql('Wrong payment type: bulk-payments');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"status"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								},
								{
									"name": "14. Get payment cancellation SCA status with wrong payment product",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "274128ad-1af9-46e6-bba5-68e8a106862c",
												"exec": [
													"pm.test('Status code is 404', () => {",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error code is PRODUCT_UNKNOWN\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PRODUCT_UNKNOWN');",
													"    pm.expect(error.text).to.eql('Wrong payment product: notAProduct');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/notAProduct/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"notAProduct",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								},
								{
									"name": "14. Get payment cancellation SCA status with wrong payment service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fee99303-ad86-494c-a04c-269d90aca3d2",
												"exec": [
													"pm.test('Status code is 400', () => {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error code is PARAMETER_NOT_SUPPORTED\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PARAMETER_NOT_SUPPORTED');",
													"    pm.expect(error.text).to.eql('Wrong payment type: bulk-payments');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations/{{authorisation_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations",
												"{{authorisation_id}}"
											]
										},
										"description": "Check the transaction status of a payment initiation."
									},
									"response": []
								},
								{
									"name": "15. Get Payment Initiation Cancellation Authorisation Information with wrong payment product",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a8385be-d28b-41f7-9ff0-3af985fe3e06",
												"exec": [
													"pm.test('Status code is 404', () => {",
													"   pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Error code is PRODUCT_UNKNOWN\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PRODUCT_UNKNOWN');",
													"    pm.expect(error.text).to.eql('Wrong payment product: notAProduct');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/notAProduct/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"{{payment_service}}",
												"notAProduct",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. Get Payment Initiation Cancellation Authorisation Information with wrong payment service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9babf6d5-0f2e-439e-8cbb-b3d03a66b56a",
												"exec": [
													"pm.test('Status code is 400', () => {",
													"   pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error code is PARAMETER_NOT_SUPPORTED\", () => {",
													"    const jsonData = pm.response.json();",
													"    const error = jsonData.tppMessages[0];",
													"    pm.expect(error.code).to.eql('PARAMETER_NOT_SUPPORTED');",
													"    pm.expect(error.text).to.eql('Wrong payment type: bulk-payments');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/xml"
											},
											{
												"key": "X-Request-ID",
												"value": "{{x_request_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url_xs2a}}/v1/bulk-payments/{{payment_product}}/{{payment_id}}/cancellation-authorisations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url_xs2a}}"
											],
											"path": [
												"v1",
												"bulk-payments",
												"{{payment_product}}",
												"{{payment_id}}",
												"cancellation-authorisations"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8ec7d9b-a05d-40ff-b277-9d7df1bc8cb8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cec72865-ebb3-4a69-b833-3b29a8f2af91",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}